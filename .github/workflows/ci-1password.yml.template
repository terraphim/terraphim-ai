name: CI with 1Password Integration

# This workflow demonstrates how to integrate 1Password secrets into CI/CD
# It can be used as a template for production workflows requiring secure secret management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  CARGO_TERM_COLOR: always
  # 1Password configuration
  OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

jobs:
  secrets-validation:
    runs-on: ubuntu-latest
    outputs:
      secrets-status: ${{ steps.validate.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: Validate 1Password authentication
        id: validate
        run: |
          if op vault list > /dev/null 2>&1; then
            echo "status=authenticated" >> $GITHUB_OUTPUT
            echo "‚úÖ 1Password CLI authenticated successfully"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå 1Password CLI authentication failed"
            exit 1
          fi

      - name: List available vaults
        run: |
          echo "Available 1Password vaults:"
          op vault list --format=table

  configure-environment:
    runs-on: ubuntu-latest
    needs: secrets-validation
    if: needs.secrets-validation.outputs.secrets-status == 'authenticated'
    outputs:
      config-file: ${{ steps.generate.outputs.config-file }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: Generate environment configuration
        id: generate
        run: |
          # Select template based on environment
          TEMPLATE_FILE="templates/env.terraphim.template"
          OUTPUT_FILE=".env.terraphim"
          
          case "${{ github.event.inputs.environment }}" in
            "prod")
              echo "Using production secrets from Terraphim-Prod vault"
              ;;
            "staging")
              echo "Using staging secrets from Terraphim-Prod vault"
              ;;
            *)
              echo "Using development secrets from Terraphim-Dev vault"
              ;;
          esac
          
          # Inject secrets using 1Password CLI
          op inject -i "$TEMPLATE_FILE" -o "$OUTPUT_FILE"
          
          echo "‚úÖ Generated configuration file: $OUTPUT_FILE"
          echo "config-file=$OUTPUT_FILE" >> $GITHUB_OUTPUT

      - name: Validate configuration
        run: |
          CONFIG_FILE="${{ steps.generate.outputs.config-file }}"
          
          # Check that all op:// references were resolved
          if grep -q "op://" "$CONFIG_FILE"; then
            echo "‚ùå Found unresolved 1Password references:"
            grep "op://" "$CONFIG_FILE"
            exit 1
          else
            echo "‚úÖ All 1Password references resolved successfully"
          fi
          
          # Count resolved secrets
          SECRET_COUNT=$(grep -c "=" "$CONFIG_FILE" || true)
          echo "üìä Resolved $SECRET_COUNT environment variables"

      - name: Upload configuration artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraphim-config-${{ github.event.inputs.environment }}
          path: .env.terraphim
          retention-days: 1

  build-with-secrets:
    runs-on: ubuntu-latest
    needs: [secrets-validation, configure-environment]
    if: needs.secrets-validation.outputs.secrets-status == 'authenticated'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download configuration
        uses: actions/download-artifact@v4
        with:
          name: terraphim-config-${{ github.event.inputs.environment }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0
          components: rustfmt, clippy

      - name: Load environment configuration
        run: |
          # Source the generated configuration
          set -a  # automatically export all variables
          source .env.terraphim
          set +a
          
          echo "‚úÖ Loaded environment configuration"
          echo "üìä Environment variables loaded: $(env | grep -E '^(OPENROUTER|OLLAMA|ANTHROPIC|PERPLEXITY|ATOMIC|CLICKUP)' | wc -l)"

      - name: Build with secrets
        run: |
          # Build Terraphim with resolved secrets available
          source .env.terraphim
          
          echo "üî® Building Terraphim with ${{ github.event.inputs.environment }} configuration..."
          cargo build --release --workspace
          
          echo "‚úÖ Build completed successfully"

      - name: Test integration with secrets
        run: |
          # Run integration tests with real API keys
          source .env.terraphim
          
          echo "üß™ Running integration tests with ${{ github.event.inputs.environment }} secrets..."
          
          # Example: Test OpenRouter API connectivity
          if [ -n "$OPENROUTER_API_KEY" ]; then
            echo "‚úÖ OpenRouter API key available"
            # Add actual API test here
          fi
          
          # Example: Test Atomic server connectivity  
          if [ -n "$ATOMIC_SERVER_URL" ] && [ -n "$ATOMIC_SERVER_SECRET" ]; then
            echo "‚úÖ Atomic server credentials available"
            # Add actual connectivity test here
          fi

  cleanup:
    runs-on: ubuntu-latest
    needs: [configure-environment, build-with-secrets]
    if: always()
    
    steps:
      - name: Cleanup sensitive artifacts
        run: |
          echo "üßπ Cleaning up sensitive configuration artifacts..."
          # GitHub Actions automatically cleans up artifacts after retention period
          # Additional cleanup steps can be added here if needed
          echo "‚úÖ Cleanup completed"

  deployment:
    runs-on: ubuntu-latest
    needs: [build-with-secrets]
    if: github.event.inputs.environment == 'prod' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to ${{ github.event.inputs.environment }} environment"
          echo "‚úÖ Deployment would happen here with validated secrets"
          # Add actual deployment steps here

  security-scan:
    runs-on: ubuntu-latest
    needs: secrets-validation
    if: needs.secrets-validation.outputs.secrets-status == 'authenticated'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: Security audit of templates
        run: |
          echo "üîç Performing security audit of configuration templates..."
          
          # Check for hardcoded secrets in templates
          if find templates/ -name "*.template" -exec grep -H -n -E "(password|secret|key|token)" {} \; | grep -v "op://"; then
            echo "‚ö†Ô∏è  Found potential hardcoded secrets in templates"
            echo "Templates should only contain op:// references"
          else
            echo "‚úÖ No hardcoded secrets found in templates"
          fi
          
          # Validate 1Password reference format
          echo "üîç Validating 1Password reference format..."
          if find templates/ -name "*.template" -exec grep -H -n "op://" {} \; | grep -v -E "op://[^/]+/[^/]+/[^\"'[:space:]]+"; then
            echo "‚ö†Ô∏è  Found malformed 1Password references"
          else
            echo "‚úÖ All 1Password references are properly formatted"
          fi
