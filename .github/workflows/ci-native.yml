name: CI Native (GitHub Actions + Docker Buildx)

on:
  push:
    branches: [main, CI_migration]
    tags:
      - "*.*.*"
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CACHE_KEY: v1-${{ github.run_id }}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.key }}
      ubuntu-versions: ${{ steps.ubuntu.outputs.versions }}
      rust-targets: ${{ steps.targets.outputs.targets }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache
        run: |
          echo "key=${{ env.CACHE_KEY }}" >> $GITHUB_OUTPUT

      - name: Set Ubuntu versions
        id: ubuntu
        run: |
          # Include Ubuntu 18.04 only if explicitly requested or for releases
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo 'versions=["18.04", "20.04", "22.04", "24.04"]' >> $GITHUB_OUTPUT
          else
            echo 'versions=["20.04", "22.04", "24.04"]' >> $GITHUB_OUTPUT
          fi

      - name: Set Rust targets
        id: targets
        run: |
          echo 'targets=["x86_64-unknown-linux-gnu", "aarch64-unknown-linux-gnu", "armv7-unknown-linux-gnueabihf", "x86_64-unknown-linux-musl"]' >> $GITHUB_OUTPUT

  lint-and-format:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config \
            build-essential

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ needs.setup.outputs.cache-key }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ needs.setup.outputs.cache-key }}-cargo-lint-

      - name: Run cargo fmt check
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  build-frontend:
    needs: setup
    uses: ./.github/workflows/frontend-build.yml
    with:
      node-version: '20'
      cache-key: ${{ needs.setup.outputs.cache-key }}

  build-rust:
    needs: [setup, build-frontend, lint-and-format]
    uses: ./.github/workflows/rust-build.yml
    with:
      rust-targets: ${{ needs.setup.outputs.rust-targets }}
      ubuntu-versions: ${{ needs.setup.outputs.ubuntu-versions }}
      frontend-dist: desktop/dist
      cache-key: ${{ needs.setup.outputs.cache-key }}

  build-docker:
    needs: [setup, build-rust]
    if: github.event_name != 'pull_request'
    uses: ./.github/workflows/docker-multiarch.yml
    with:
      platforms: 'linux/amd64,linux/arm64,linux/arm/v7'
      ubuntu-versions: ${{ needs.setup.outputs.ubuntu-versions }}
      push: true
      tag: ${{ github.ref_name }}

  build-tauri:
    needs: [setup, build-frontend]
    if: github.event_name != 'pull_request'
    uses: ./.github/workflows/tauri-build.yml
    with:
      cache-key: ${{ needs.setup.outputs.cache-key }}

  test-suite:
    runs-on: ubuntu-latest
    needs: [setup, build-rust]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config \
            build-essential

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ needs.setup.outputs.cache-key }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ needs.setup.outputs.cache-key }}-cargo-test-

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: terraphim_server/dist

      - name: Run unit tests
        run: cargo test --workspace --lib

      - name: Run integration tests
        run: cargo test --workspace --test '*'

  package-repository:
    runs-on: ubuntu-latest
    needs: [setup, build-rust]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        ubuntu-version: ${{ fromJSON(needs.setup.outputs.ubuntu-versions) }}

    steps:
      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: deb-package-*-ubuntu${{ matrix.ubuntu-version }}
          path: packages/
          merge-multiple: true

      - name: Create package repository structure
        run: |
          mkdir -p packages/ubuntu-${{ matrix.ubuntu-version }}
          find packages/ -name "*.deb" -exec mv {} packages/ubuntu-${{ matrix.ubuntu-version }}/ \;

      - name: Generate package metadata
        run: |
          cd packages/ubuntu-${{ matrix.ubuntu-version }}
          apt-ftparchive packages . > Packages
          gzip -k Packages
          apt-ftparchive release . > Release

      - name: Upload package repository
        uses: actions/upload-artifact@v4
        with:
          name: deb-repository-ubuntu-${{ matrix.ubuntu-version }}
          path: packages/ubuntu-${{ matrix.ubuntu-version }}/
          retention-days: 90

  security-scan:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name != 'pull_request'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ github.ref_name }}-ubuntu22.04
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    runs-on: ubuntu-latest
    needs: [build-rust, build-docker, build-tauri, test-suite, security-scan]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Create release structure
        run: |
          mkdir -p release/{binaries,packages,docker-images,desktop}

          # Organize binaries by architecture and Ubuntu version
          find release-artifacts/ -name "binaries-*" -type d | while read dir; do
            target=$(basename "$dir" | sed 's/binaries-\(.*\)-ubuntu.*/\1/')
            ubuntu=$(basename "$dir" | sed 's/.*-ubuntu\(.*\)/\1/')
            mkdir -p "release/binaries/${target}"
            cp -r "$dir"/* "release/binaries/${target}/"
          done

          # Organize .deb packages
          find release-artifacts/ -name "*.deb" -exec cp {} release/packages/ \;

          # Organize desktop applications
          find release-artifacts/ -name "*.dmg" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.exe" | while read file; do
            cp "$file" release/desktop/
          done

          # Create checksums
          cd release
          find . -type f -name "terraphim*" -exec sha256sum {} \; > SHA256SUMS

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/binaries/**/*
            release/packages/*.deb
            release/desktop/*
            release/SHA256SUMS
          body: |
            ## Release ${{ github.ref_name }}

            ### Binaries
            - Linux x86_64 (GNU and musl)
            - Linux ARM64
            - Linux ARMv7

            ### Desktop Applications
            - macOS: .dmg installer
            - Linux: .AppImage portable
            - Windows: .msi and .exe installers

            ### Docker Images
            Available for Ubuntu 18.04, 20.04, 22.04, and 24.04:
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}-ubuntu22.04
            ```

            ### Debian Packages
            Install with:
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/terraphim-server_*.deb
            sudo dpkg -i terraphim-server_*.deb
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-rust, build-docker, build-tauri, test-suite]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: Clean up PR artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            frontend-dist
            binaries-*
            deb-package-*
            desktop-*
        continue-on-error: true

  summary:
    runs-on: ubuntu-latest
    needs: [setup, build-frontend, build-rust, build-docker, build-tauri, test-suite]
    if: always()

    steps:
      - name: Generate build summary
        run: |
          echo "## CI Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Build | ${{ needs.build-frontend.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Rust Build | ${{ needs.build-rust.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-docker.result == 'success' && '✅' || needs.build-docker.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tauri Build | ${{ needs.build-tauri.result == 'success' && '✅' || needs.build-tauri.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | ${{ needs.test-suite.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ubuntu Versions:** ${{ needs.setup.outputs.ubuntu-versions }}" >> $GITHUB_STEP_SUMMARY
          echo "**Rust Targets:** ${{ needs.setup.outputs.rust-targets }}" >> $GITHUB_STEP_SUMMARY
          echo "**Comprehensive CI/CD Pipeline Status:** $([ '${{ needs.build-rust.result }}' == 'success' ] && echo 'ACTIVE ✅' || echo 'FAILED ❌')" >> $GITHUB_STEP_SUMMARY
