name: Comprehensive Release

on:
  push:
    tags:
      - 'v*'
      - 'terraphim_server-v*'
      - 'terraphim-ai-desktop-v*'
      - 'terraphim_tui-v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    name: Build binaries for ${{ matrix.target }}
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            use_cross: false
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            use_cross: true
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            use_cross: true
          - os: ubuntu-20.04
            target: armv7-unknown-linux-musleabihf
            use_cross: true
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use_cross: false
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
      
      - name: Build server binary
        run: |
          ${{ matrix.use_cross && 'cross' || 'cargo' }} build --release \
            --target ${{ matrix.target }} --bin terraphim_server
      
      - name: Build TUI binary
        run: |
          ${{ matrix.use_cross && 'cross' || 'cargo' }} build --release \
            --target ${{ matrix.target }} --bin terraphim-tui
      
      - name: Prepare artifacts (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/terraphim_server artifacts/terraphim_server-${{ matrix.target }}
          cp target/${{ matrix.target }}/release/terraphim-tui artifacts/terraphim-tui-${{ matrix.target }}
          chmod +x artifacts/*
      
      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\terraphim_server.exe artifacts\terraphim_server-${{ matrix.target }}.exe
          copy target\${{ matrix.target }}\release\terraphim-tui.exe artifacts\terraphim-tui-${{ matrix.target }}.exe
      
      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: artifacts/*

  build-debian-packages:
    name: Build Debian packages
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-deb
        run: cargo install cargo-deb
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build Debian packages
        run: |
          # Build server package
          cargo deb -p terraphim_server --output target/debian/
          
          # Build TUI package  
          cargo deb -p terraphim_tui --output target/debian/
          
          # Build desktop package
          cd desktop
          yarn install --frozen-lockfile
          cd ..
          cargo deb -p terraphim-ai-desktop --output target/debian/
      
      - name: Upload Debian packages
        uses: actions/upload-artifact@v4
        with:
          name: debian-packages
          path: target/debian/*.deb

  build-tauri-desktop:
    name: Build Tauri desktop app for ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: desktop/yarn.lock
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: desktop/src-tauri
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev librsvg2-dev
      
      - name: Install frontend dependencies
        working-directory: ./desktop
        run: yarn install --frozen-lockfile
      
      - name: Build Tauri app
        working-directory: ./desktop
        run: yarn tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload desktop artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: desktop-macos
          path: |
            desktop/src-tauri/target/release/bundle/dmg/*.dmg
            desktop/src-tauri/target/release/bundle/macos/*.app
      
      - name: Upload desktop artifacts (Linux)
        if: matrix.platform == 'ubuntu-20.04'
        uses: actions/upload-artifact@v4
        with:
          name: desktop-linux
          path: |
            desktop/src-tauri/target/release/bundle/appimage/*.AppImage
            desktop/src-tauri/target/release/bundle/deb/*.deb
      
      - name: Upload desktop artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: desktop-windows
          path: |
            desktop/src-tauri/target/release/bundle/msi/*.msi
            desktop/src-tauri/target/release/bundle/nsis/*.exe

  build-docker:
    name: Build and push Docker images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Earthly
        run: |
          sudo /bin/sh -c 'wget https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push Docker images
        run: |
          earthly --push +docker-all
        env:
          VERSION: ${{ steps.version.outputs.version }}

  create-release:
    name: Create GitHub release
    needs: [build-binaries, build-debian-packages, build-tauri-desktop, build-docker]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy binary artifacts
          find binaries-* -type f -executable -o -name "*.exe" | while read file; do
            cp "$file" release-assets/
          done
          
          # Copy Debian packages
          find debian-packages -name "*.deb" -type f | while read file; do
            cp "$file" release-assets/
          done
          
          # Copy desktop artifacts
          find desktop-* -type f \( -name "*.dmg" -o -name "*.AppImage" -o -name "*.msi" -o -name "*.exe" \) | while read file; do
            cp "$file" release-assets/
          done
      
      - name: Generate checksums
        working-directory: release-assets
        run: |
          sha256sum * > checksums.txt
      
      - name: Extract release notes from tag
        id: release-notes
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            echo "Creating release for tag: $TAG"
            
            # Extract component and version from tag
            if [[ "$TAG" == *"-v"* ]]; then
              COMPONENT=${TAG%-v*}
              VERSION=${TAG##*-v}
              echo "Component: $COMPONENT, Version: $VERSION"
              TITLE="$COMPONENT v$VERSION"
            else
              TITLE="$TAG"
            fi
            
            echo "title=$TITLE" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.release-notes.outputs.title }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          files: release-assets/*
          body: |
            ## Release Assets
            
            ### Server Binaries
            - `terraphim_server-*`: Server binaries for various platforms
            
            ### TUI Binaries  
            - `terraphim-tui-*`: Terminal UI binaries for various platforms
            
            ### Desktop Applications
            - `*.dmg`: macOS desktop installer
            - `*.AppImage`: Linux portable desktop app
            - `*.msi`, `*.exe`: Windows desktop installers
            
            ### Debian Packages
            - `*.deb`: Debian/Ubuntu packages for easy installation
            
            ### Docker Images
            - `ghcr.io/terraphim/terraphim-server:latest`: Multi-arch server image
            
            ### Installation
            
            ```bash
            # Install via Homebrew (macOS/Linux)
            brew install terraphim/terraphim-ai/terraphim-ai
            
            # Install Debian package (Ubuntu/Debian)
            sudo dpkg -i terraphim-server_*.deb
            
            # Run with Docker
            docker run ghcr.io/terraphim/terraphim-server:latest
            ```
            
            See `checksums.txt` for file integrity verification.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew formula
    needs: create-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Update Homebrew formula
        run: |
          echo "Homebrew formula update will be implemented with tap repository"
          # This step would typically update a Homebrew tap repository
          # with the new version and SHA256 checksums