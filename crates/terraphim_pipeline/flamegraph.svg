<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="645.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="645.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[stack]] (5 samples, 0.13%)</title><rect x="0.0767%" y="581" width="0.1279%" height="15" fill="rgb(227,0,7)"/><text x="0.3267%" y="591.50"></text></g><g><title>_RINvXs0_Cs66Bbsswddmh_13serde_ignoredINtB6_12DeserializerINtNtCs9cHTmVbfBFL_4toml3map3MapNtNtCsd3RHxJkQi5j_5alloc6string6StringNtNtBY_5value5ValueENCNvNtNtCsbKDaq8p1Ld5_5cargo4util4toml22read_manifest_from_strs_0ENtNtCsjRPAdyNvt90_5serde2de12Deserializer18deserialize_structNtNvXNvB2p_s1_1__NtB2p_12TomlManifestNtB3r_11Deserialize11deserialize9___VisitorEB2t_ (4 samples, 0.10%)</title><rect x="0.4349%" y="565" width="0.1023%" height="15" fill="rgb(217,0,24)"/><text x="0.6849%" y="575.50"></text></g><g><title>_RINvXs0_NvXNvNtNtCsbKDaq8p1Ld5_5cargo4util4tomls1_1__NtBb_12TomlManifestNtNtCsjRPAdyNvt90_5serde2de11Deserialize11deserializeNtB6_9___VisitorNtB1a_7Visitor9visit_mapINtCs66Bbsswddmh_13serde_ignored9MapAccessQNtNtCs9cHTmVbfBFL_4toml5value15MapDeserializerNCNvBb_22read_manifest_from_strs_0EEBf_ (4 samples, 0.10%)</title><rect x="0.4349%" y="549" width="0.1023%" height="15" fill="rgb(221,193,54)"/><text x="0.6849%" y="559.50"></text></g><g><title>PEM_X509_INFO_read_bio (4 samples, 0.10%)</title><rect x="0.7163%" y="389" width="0.1023%" height="15" fill="rgb(248,212,6)"/><text x="0.9663%" y="399.50"></text></g><g><title>_RNvNtCs14G9m06c8py_4git24opts27set_verify_owner_validation (5 samples, 0.13%)</title><rect x="0.7163%" y="517" width="0.1279%" height="15" fill="rgb(208,68,35)"/><text x="0.9663%" y="527.50"></text></g><g><title>_RNvCsjjLOVlzH2YQ_11libgit2_sys4init (5 samples, 0.13%)</title><rect x="0.7163%" y="501" width="0.1279%" height="15" fill="rgb(232,128,0)"/><text x="0.9663%" y="511.50"></text></g><g><title>_RINvMs0_NtNtNtCs4KDeBHTDlqU_3std10sys_common4once5futexNtB6_4Once4callNCINvMs0_NtNtBc_4sync4onceNtB1f_4Once9call_onceNCNvCsjjLOVlzH2YQ_11libgit2_sys4init0E0EB1V_ (5 samples, 0.13%)</title><rect x="0.7163%" y="485" width="0.1279%" height="15" fill="rgb(207,160,47)"/><text x="0.9663%" y="495.50"></text></g><g><title>git_runtime_init (5 samples, 0.13%)</title><rect x="0.7163%" y="469" width="0.1279%" height="15" fill="rgb(228,23,34)"/><text x="0.9663%" y="479.50"></text></g><g><title>git_openssl_stream_global_init (5 samples, 0.13%)</title><rect x="0.7163%" y="453" width="0.1279%" height="15" fill="rgb(218,30,26)"/><text x="0.9663%" y="463.50"></text></g><g><title>X509_STORE_set_default_paths (5 samples, 0.13%)</title><rect x="0.7163%" y="437" width="0.1279%" height="15" fill="rgb(220,122,19)"/><text x="0.9663%" y="447.50"></text></g><g><title>by_file_ctrl (5 samples, 0.13%)</title><rect x="0.7163%" y="421" width="0.1279%" height="15" fill="rgb(250,228,42)"/><text x="0.9663%" y="431.50"></text></g><g><title>X509_load_cert_crl_file (5 samples, 0.13%)</title><rect x="0.7163%" y="405" width="0.1279%" height="15" fill="rgb(240,193,28)"/><text x="0.9663%" y="415.50"></text></g><g><title>_RNvCsd1lxFvikcIO_5cargo8init_git (6 samples, 0.15%)</title><rect x="0.7163%" y="533" width="0.1535%" height="15" fill="rgb(216,20,37)"/><text x="0.9663%" y="543.50"></text></g><g><title>_RINvYINtNtCsgJDcm2TQlgD_10serde_json3ser8CompoundQINtNtCsd3RHxJkQi5j_5alloc3vec3VechENtB6_16CompactFormatterENtNtCsjRPAdyNvt90_5serde3ser12SerializeMap15serialize_entryeIBN_NtNtNtCsbKDaq8p1Ld5_5cargo4core7package17SerializedPackageEECsd1lxFvikcIO_5cargo (6 samples, 0.15%)</title><rect x="0.8954%" y="485" width="0.1535%" height="15" fill="rgb(206,188,39)"/><text x="1.1454%" y="495.50"></text></g><g><title>_RINvXNvNtNtCsbKDaq8p1Ld5_5cargo4core7package1__NtB5_17SerializedPackageNtNtCsjRPAdyNvt90_5serde3ser9Serialize9serializeQINtNtCsgJDcm2TQlgD_10serde_json3ser10SerializerQINtNtCsd3RHxJkQi5j_5alloc3vec3VechEEECsd1lxFvikcIO_5cargo (6 samples, 0.15%)</title><rect x="0.8954%" y="469" width="0.1535%" height="15" fill="rgb(217,207,13)"/><text x="1.1454%" y="479.50"></text></g><g><title>_RINvMs0_NtNtCsbKDaq8p1Ld5_5cargo4core5shellNtB6_5Shell10print_jsonNtNtNtBa_3ops21cargo_output_metadata10ExportInfoECsd1lxFvikcIO_5cargo (7 samples, 0.18%)</title><rect x="0.8954%" y="517" width="0.1791%" height="15" fill="rgb(231,73,38)"/><text x="1.1454%" y="527.50"></text></g><g><title>_RINvXNvNtNtCsbKDaq8p1Ld5_5cargo3ops21cargo_output_metadata1__NtB5_10ExportInfoNtNtCsjRPAdyNvt90_5serde3ser9Serialize9serializeQINtNtCsgJDcm2TQlgD_10serde_json3ser10SerializerQINtNtCsd3RHxJkQi5j_5alloc3vec3VechEEECsd1lxFvikcIO_5cargo (7 samples, 0.18%)</title><rect x="0.8954%" y="501" width="0.1791%" height="15" fill="rgb(225,20,46)"/><text x="1.1454%" y="511.50"></text></g><g><title>_RINvNtCsi4K1ZUsoJC0_4core3ptr13drop_in_placeNtNtNtCsbKDaq8p1Ld5_5cargo4core7package10PackageSetEBM_ (4 samples, 0.10%)</title><rect x="1.1512%" y="485" width="0.1023%" height="15" fill="rgb(210,31,41)"/><text x="1.4012%" y="495.50"></text></g><g><title>_RINvNtCsi4K1ZUsoJC0_4core3ptr13drop_in_placeNtNtNtCsbKDaq8p1Ld5_5cargo3ops7resolve16WorkspaceResolveEBM_ (5 samples, 0.13%)</title><rect x="1.1512%" y="501" width="0.1279%" height="15" fill="rgb(221,200,47)"/><text x="1.4012%" y="511.50"></text></g><g><title>_RNvCsd1lxFvikcIO_5cargo4main (23 samples, 0.59%)</title><rect x="0.7163%" y="565" width="0.5884%" height="15" fill="rgb(226,26,5)"/><text x="0.9663%" y="575.50"></text></g><g><title>_RNvNtCsd1lxFvikcIO_5cargo3cli4main (23 samples, 0.59%)</title><rect x="0.7163%" y="549" width="0.5884%" height="15" fill="rgb(249,33,26)"/><text x="0.9663%" y="559.50"></text></g><g><title>_RNvNtNtCsd1lxFvikcIO_5cargo8commands8metadata4exec (16 samples, 0.41%)</title><rect x="0.8954%" y="533" width="0.4093%" height="15" fill="rgb(235,183,28)"/><text x="1.1454%" y="543.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo3ops21cargo_output_metadata15output_metadata (6 samples, 0.15%)</title><rect x="1.1512%" y="517" width="0.1535%" height="15" fill="rgb(221,5,38)"/><text x="1.4012%" y="527.50"></text></g><g><title>_RNvNtNtNtCsbKDaq8p1Ld5_5cargo4util4toml7targets7targets (7 samples, 0.18%)</title><rect x="1.7907%" y="549" width="0.1791%" height="15" fill="rgb(247,18,42)"/><text x="2.0407%" y="559.50"></text></g><g><title>_RNvNvMsu_NtNtCsbKDaq8p1Ld5_5cargo4util4tomlNtB7_12TomlManifest16to_real_manifest20process_dependencies (4 samples, 0.10%)</title><rect x="1.9698%" y="549" width="0.1023%" height="15" fill="rgb(241,131,45)"/><text x="2.2198%" y="559.50"></text></g><g><title>_RNvMsu_NtNtCsbKDaq8p1Ld5_5cargo4util4tomlNtB5_12TomlManifest16to_real_manifest (19 samples, 0.49%)</title><rect x="1.6117%" y="565" width="0.4861%" height="15" fill="rgb(249,31,29)"/><text x="1.8617%" y="575.50"></text></g><g><title>_RNvNtCs8cwQ6Hc7UYR_9toml_edit6parser14parse_document (7 samples, 0.18%)</title><rect x="2.0977%" y="565" width="0.1791%" height="15" fill="rgb(225,111,53)"/><text x="2.3477%" y="575.50"></text></g><g><title>_RNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser8document8document (7 samples, 0.18%)</title><rect x="2.0977%" y="549" width="0.1791%" height="15" fill="rgb(238,160,17)"/><text x="2.3477%" y="559.50"></text></g><g><title>_RINvNtNtCseIdT0lGreXn_6winnow10combinator5multi8repeat0_INtNtB6_6stream7LocatedRNtBV_4BStrETuuEuNtNtB6_5error12ContextErrorTNCNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser8document8documents0_0NCNvB22_8parse_ws0EEB26_ (7 samples, 0.18%)</title><rect x="2.0977%" y="533" width="0.1791%" height="15" fill="rgb(214,148,48)"/><text x="2.3477%" y="543.50"></text></g><g><title>_RNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser8document12parse_keyval (7 samples, 0.18%)</title><rect x="2.0977%" y="517" width="0.1791%" height="15" fill="rgb(232,36,49)"/><text x="2.3477%" y="527.50"></text></g><g><title>_RNCNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser5value5value0B7_ (7 samples, 0.18%)</title><rect x="2.0977%" y="501" width="0.1791%" height="15" fill="rgb(209,103,24)"/><text x="2.3477%" y="511.50"></text></g><g><title>_RNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser7strings6string (5 samples, 0.13%)</title><rect x="2.1489%" y="485" width="0.1279%" height="15" fill="rgb(229,88,8)"/><text x="2.3989%" y="495.50"></text></g><g><title>_RNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser7strings12basic_string (4 samples, 0.10%)</title><rect x="2.1745%" y="469" width="0.1023%" height="15" fill="rgb(213,181,19)"/><text x="2.4245%" y="479.50"></text></g><g><title>_RNvXs_NtNtCseIdT0lGreXn_6winnow10combinator6branchTINtNtB6_6parser3MapINtBQ_6TryMapNCINvNtB8_5token10take_whileTThhEhINtNtNtCsi4K1ZUsoJC0_4core3ops5range14RangeInclusivehEB1R_B1R_EINtNtB8_6stream7LocatedRNtB2V_4BStrENtNtB8_5error12ContextErrorINtB1U_9RangeFromjEE0NvNtNtB1Y_3str8converts9from_utf8B2S_RShReB3s_NtNtB4i_5error9Utf8ErrorENcNtINtNtCsd3RHxJkQi5j_5alloc6borrow3CoweE8Borrowed0B2S_B4S_B5r_B3s_EIBO_NvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser7strings7escapedNCNvB6A_11basic_chars0B2S_cB6l_B3s_EEINtB4_3AltB2S_B6l_B3s_E6choiceB6E_ (4 samples, 0.10%)</title><rect x="2.1745%" y="453" width="0.1023%" height="15" fill="rgb(254,191,54)"/><text x="2.4245%" y="463.50"></text></g><g><title>_RNvXs1_NtNtCseIdT0lGreXn_6winnow10combinator6parserINtB5_3MapINtB5_6TryMapNCINvNtB9_5token10take_whileTThhEhINtNtNtCsi4K1ZUsoJC0_4core3ops5range14RangeInclusivehEB1I_B1I_EINtNtB9_6stream7LocatedRNtB2M_4BStrENtNtB9_5error12ContextErrorINtB1L_9RangeFromjEE0NvNtNtB1P_3str8converts9from_utf8B2J_RShReB3j_NtNtB49_5error9Utf8ErrorENcNtINtNtCsd3RHxJkQi5j_5alloc6borrow3CoweE8Borrowed0B2J_B4J_B5i_B3j_EINtNtB9_6parser6ParserB2J_B6c_B3j_E10parse_nextCs8cwQ6Hc7UYR_9toml_edit (4 samples, 0.10%)</title><rect x="2.1745%" y="437" width="0.1023%" height="15" fill="rgb(241,83,37)"/><text x="2.4245%" y="447.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo3ops7resolve21resolve_with_previous (4 samples, 0.10%)</title><rect x="2.5582%" y="533" width="0.1023%" height="15" fill="rgb(233,36,39)"/><text x="2.8082%" y="543.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo3ops21cargo_output_metadata15output_metadata (16 samples, 0.41%)</title><rect x="2.4047%" y="565" width="0.4093%" height="15" fill="rgb(226,3,54)"/><text x="2.6547%" y="575.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo3ops7resolve20resolve_ws_with_opts (14 samples, 0.36%)</title><rect x="2.4559%" y="549" width="0.3581%" height="15" fill="rgb(245,192,40)"/><text x="2.7059%" y="559.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo3ops7resolve21resolve_with_registry.llvm.933817797210135127 (6 samples, 0.15%)</title><rect x="2.6605%" y="533" width="0.1535%" height="15" fill="rgb(238,167,29)"/><text x="2.9105%" y="543.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo3ops7resolve20resolve_ws_with_opts (13 samples, 0.33%)</title><rect x="2.8140%" y="565" width="0.3326%" height="15" fill="rgb(232,182,51)"/><text x="3.0640%" y="575.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo3ops7resolve21resolve_with_registry.llvm.933817797210135127 (6 samples, 0.15%)</title><rect x="2.9931%" y="549" width="0.1535%" height="15" fill="rgb(231,60,39)"/><text x="3.2431%" y="559.50"></text></g><g><title>_RINvXs0_NtNtNtCsi4K1ZUsoJC0_4core4iter8adapters3mapINtB6_3MapINtNtB8_6filter6FilterIBY_IBY_INtNtB8_10filter_map9FilterMapIB1s_INtNtNtNtCs4KDeBHTDlqU_3std11collections4hash3map7IterMutNtCs5JiARNQZ4YY_6semver7VersionNtNtNtNtCsbKDaq8p1Ld5_5cargo7sources8registry5index17MaybeIndexSummaryENCNvMB3s_NtB3s_13RegistryIndex9summaries0ENCB4B_s_0ENCB4B_s0_0ENCNvB4D_23query_inner_with_online0ENCB5C_s_0ENCB5C_s0_0ENtNtNtBa_6traits8iterator8Iterator8try_folduNCINvNvB6u_4find5checkNtNtNtB3y_4core7summary7SummaryQNCB5C_s1_0E0INtNtNtBc_3ops12control_flow11ControlFlowB7y_EEB3y_ (7 samples, 0.18%)</title><rect x="3.4024%" y="405" width="0.1791%" height="15" fill="rgb(208,69,12)"/><text x="3.6524%" y="415.50"></text></g><g><title>_RNCNvMNtNtNtCsbKDaq8p1Ld5_5cargo7sources8registry5indexNtB4_13RegistryIndex9summariess_0Ba_.llvm.13808479549800979348 (6 samples, 0.15%)</title><rect x="3.4280%" y="389" width="0.1535%" height="15" fill="rgb(235,93,37)"/><text x="3.6780%" y="399.50"></text></g><g><title>_RNvMs3_NtNtNtCsbKDaq8p1Ld5_5cargo7sources8registry5indexNtB5_12IndexSummary5parse.llvm.13935986743541606878 (6 samples, 0.15%)</title><rect x="3.4280%" y="373" width="0.1535%" height="15" fill="rgb(213,116,39)"/><text x="3.6780%" y="383.50"></text></g><g><title>_RINvNtNtCsi4K1ZUsoJC0_4core4iter8adapters11try_processINtNtB2_10filter_map9FilterMapINtNtNtCsd3RHxJkQi5j_5alloc3vec9into_iter8IntoIterTNtNtNtCsbKDaq8p1Ld5_5cargo4core10dependency10DependencyINtNtB1r_2rc2RcINtNtNtNtB1r_11collections5btree3set8BTreeSetNtNtNtB2f_4util9interning14InternedStringEEEENCNvMNtNtB2d_8resolver9dep_cacheNtB4O_15RegistryQueryer10build_deps0ETB29_IB33_INtB1p_3VecNtNtB2d_7summary7SummaryEEB32_EINtNtB6_6result6ResultNtNtB6_7convert10InfallibleNtCs4NZsH9mwk5B_6anyhow5ErrorENCINvXsn_B6J_IB6H_IB61_B5Q_EB7t_EINtNtNtB4_6traits7collect12FromIteratorIB6H_B5Q_B7t_EE9from_iterBQ_E0B8f_EB2f_ (21 samples, 0.54%)</title><rect x="3.3001%" y="533" width="0.5372%" height="15" fill="rgb(222,207,29)"/><text x="3.5501%" y="543.50"></text></g><g><title>_RNvXs_NtNtCsd3RHxJkQi5j_5alloc3vec16in_place_collectINtB6_3VecTNtNtNtCsbKDaq8p1Ld5_5cargo4core10dependency10DependencyINtNtB8_2rc2RcIBP_NtNtB13_7summary7SummaryEEIB1T_INtNtNtNtB8_11collections5btree3set8BTreeSetNtNtNtB15_4util9interning14InternedStringEEEEINtNtB6_14spec_from_iter12SpecFromIterBY_INtNtNtCsi4K1ZUsoJC0_4core4iter8adapters12GenericShuntINtNtB4O_10filter_map9FilterMapINtNtB6_9into_iter8IntoIterTBZ_B2A_EENCNvMNtNtB13_8resolver9dep_cacheNtB6O_15RegistryQueryer10build_deps0EINtNtB4S_6result6ResultNtNtB4S_7convert10InfallibleNtCs4NZsH9mwk5B_6anyhow5ErrorEEE9from_iterB15_ (21 samples, 0.54%)</title><rect x="3.3001%" y="517" width="0.5372%" height="15" fill="rgb(206,96,30)"/><text x="3.5501%" y="527.50"></text></g><g><title>_RNCNvMNtNtNtCsbKDaq8p1Ld5_5cargo4core8resolver9dep_cacheNtB4_15RegistryQueryer10build_deps0Ba_.llvm.10017838624099923439 (21 samples, 0.54%)</title><rect x="3.3001%" y="501" width="0.5372%" height="15" fill="rgb(218,138,4)"/><text x="3.5501%" y="511.50"></text></g><g><title>_RNvMNtNtNtCsbKDaq8p1Ld5_5cargo4core8resolver9dep_cacheNtB2_15RegistryQueryer5query (21 samples, 0.54%)</title><rect x="3.3001%" y="485" width="0.5372%" height="15" fill="rgb(250,191,14)"/><text x="3.5501%" y="495.50"></text></g><g><title>_RNvXs_NtNtCsbKDaq8p1Ld5_5cargo4core8registryNtB4_15PackageRegistryNtB4_8Registry5query (18 samples, 0.46%)</title><rect x="3.3768%" y="469" width="0.4605%" height="15" fill="rgb(239,60,40)"/><text x="3.6268%" y="479.50"></text></g><g><title>_RNvXs_NtNtCsbKDaq8p1Ld5_5cargo7sources8replacedNtB4_14ReplacedSourceNtNtNtB8_4core6source6Source5query (17 samples, 0.43%)</title><rect x="3.4024%" y="453" width="0.4349%" height="15" fill="rgb(206,27,48)"/><text x="3.6524%" y="463.50"></text></g><g><title>_RNvXs_NtNtCsbKDaq8p1Ld5_5cargo7sources8registryNtB4_14RegistrySourceNtNtNtB8_4core6source6Source5query (17 samples, 0.43%)</title><rect x="3.4024%" y="437" width="0.4349%" height="15" fill="rgb(225,35,8)"/><text x="3.6524%" y="447.50"></text></g><g><title>_RNvMNtNtNtCsbKDaq8p1Ld5_5cargo7sources8registry5indexNtB2_13RegistryIndex23query_inner_with_online.llvm.13935986743541606878 (17 samples, 0.43%)</title><rect x="3.4024%" y="421" width="0.4349%" height="15" fill="rgb(250,213,24)"/><text x="3.6524%" y="431.50"></text></g><g><title>_RNvMNtNtNtCsbKDaq8p1Ld5_5cargo7sources8registry5indexNtB2_13RegistryIndex14load_summaries.llvm.13935986743541606878 (7 samples, 0.18%)</title><rect x="3.6582%" y="405" width="0.1791%" height="15" fill="rgb(247,123,22)"/><text x="3.9082%" y="415.50"></text></g><g><title>std::fs::read::inner (5 samples, 0.13%)</title><rect x="3.7094%" y="389" width="0.1279%" height="15" fill="rgb(231,138,38)"/><text x="3.9594%" y="399.50"></text></g><g><title>std::io::default_read_to_end (4 samples, 0.10%)</title><rect x="3.7350%" y="373" width="0.1023%" height="15" fill="rgb(231,145,46)"/><text x="3.9850%" y="383.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (4 samples, 0.10%)</title><rect x="3.7350%" y="357" width="0.1023%" height="15" fill="rgb(251,118,11)"/><text x="3.9850%" y="367.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (4 samples, 0.10%)</title><rect x="3.7350%" y="341" width="0.1023%" height="15" fill="rgb(217,147,25)"/><text x="3.9850%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (4 samples, 0.10%)</title><rect x="3.7350%" y="325" width="0.1023%" height="15" fill="rgb(247,81,37)"/><text x="3.9850%" y="335.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (4 samples, 0.10%)</title><rect x="3.7350%" y="309" width="0.1023%" height="15" fill="rgb(209,12,38)"/><text x="3.9850%" y="319.50"></text></g><g><title>read (4 samples, 0.10%)</title><rect x="3.7350%" y="293" width="0.1023%" height="15" fill="rgb(227,1,9)"/><text x="3.9850%" y="303.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo4core8resolver18activate_deps_loop (26 samples, 0.67%)</title><rect x="3.2745%" y="565" width="0.6651%" height="15" fill="rgb(248,47,43)"/><text x="3.5245%" y="575.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo4core8resolver8activate (25 samples, 0.64%)</title><rect x="3.3001%" y="549" width="0.6395%" height="15" fill="rgb(221,10,30)"/><text x="3.5501%" y="559.50"></text></g><g><title>_RINvXs6_NtCs8cwQ6Hc7UYR_9toml_edit2deNtB6_12DeserializerNtNtCsjRPAdyNvt90_5serde2de12Deserializer15deserialize_anyNtNvXs6_NtCs9cHTmVbfBFL_4toml3mapINtB1W_3MapNtNtCsd3RHxJkQi5j_5alloc6string6StringNtNtB1Y_5value5ValueENtBU_11Deserialize11deserialize7VisitorEB1Y_ (6 samples, 0.15%)</title><rect x="4.0164%" y="533" width="0.1535%" height="15" fill="rgb(210,229,1)"/><text x="4.2664%" y="543.50"></text></g><g><title>_RINvXs_NtNtCs8cwQ6Hc7UYR_9toml_edit2de5valueNtB5_17ValueDeserializerNtNtCsjRPAdyNvt90_5serde2de12Deserializer15deserialize_anyNtNvXs6_NtCs9cHTmVbfBFL_4toml3mapINtB28_3MapNtNtCsd3RHxJkQi5j_5alloc6string6StringNtNtB2a_5value5ValueENtB16_11Deserialize11deserialize7VisitorEB2a_ (6 samples, 0.15%)</title><rect x="4.0164%" y="517" width="0.1535%" height="15" fill="rgb(222,148,37)"/><text x="4.2664%" y="527.50"></text></g><g><title>_RINvXNtNtCs8cwQ6Hc7UYR_9toml_edit2de5tableNtB3_17TableDeserializerNtNtCsjRPAdyNvt90_5serde2de12Deserializer15deserialize_anyNtNvXs6_NtCs9cHTmVbfBFL_4toml3mapINtB26_3MapNtNtCsd3RHxJkQi5j_5alloc6string6StringNtNtB28_5value5ValueENtB14_11Deserialize11deserialize7VisitorEB28_ (6 samples, 0.15%)</title><rect x="4.0164%" y="501" width="0.1535%" height="15" fill="rgb(234,67,33)"/><text x="4.2664%" y="511.50"></text></g><g><title>_RINvXs3_NtNtCs8cwQ6Hc7UYR_9toml_edit2de5tableNtB6_14TableMapAccessNtNtCsjRPAdyNvt90_5serde2de9MapAccess15next_value_seedINtNtCsi4K1ZUsoJC0_4core6marker11PhantomDataNtNtCs9cHTmVbfBFL_4toml5value5ValueEEB2G_ (6 samples, 0.15%)</title><rect x="4.0164%" y="485" width="0.1535%" height="15" fill="rgb(247,98,35)"/><text x="4.2664%" y="495.50"></text></g><g><title>_RINvXs_NtNtCs8cwQ6Hc7UYR_9toml_edit2de5valueNtB5_17ValueDeserializerNtNtCsjRPAdyNvt90_5serde2de12Deserializer15deserialize_anyNtNvXsg_NtCs9cHTmVbfBFL_4toml5valueNtB28_5ValueNtB16_11Deserialize11deserialize12ValueVisitorEB2a_ (6 samples, 0.15%)</title><rect x="4.0164%" y="469" width="0.1535%" height="15" fill="rgb(247,138,52)"/><text x="4.2664%" y="479.50"></text></g><g><title>_RINvXNvXsg_NtCs9cHTmVbfBFL_4toml5valueNtB9_5ValueNtNtCsjRPAdyNvt90_5serde2de11Deserialize11deserializeNtB3_12ValueVisitorNtBN_7Visitor9visit_mapNtNtNtCs8cwQ6Hc7UYR_9toml_edit2de5table14TableMapAccessEBb_ (5 samples, 0.13%)</title><rect x="4.0420%" y="453" width="0.1279%" height="15" fill="rgb(213,79,30)"/><text x="4.2920%" y="463.50"></text></g><g><title>_RNvMs6_NtNtCsepxNdS1rkhy_8indexmap3map4coreINtB5_11VacantEntryNtNtCs8cwQ6Hc7UYR_9toml_edit15internal_string14InternalStringNtNtB12_5table13TableKeyValueE6insertB12_ (4 samples, 0.10%)</title><rect x="4.2466%" y="453" width="0.1023%" height="15" fill="rgb(246,177,23)"/><text x="4.4966%" y="463.50"></text></g><g><title>_RNvMNtNtCs8cwQ6Hc7UYR_9toml_edit6parser5stateNtB2_10ParseState9on_keyval (8 samples, 0.20%)</title><rect x="4.1954%" y="469" width="0.2047%" height="15" fill="rgb(230,62,27)"/><text x="4.4454%" y="479.50"></text></g><g><title>_RNvNtNtCsbKDaq8p1Ld5_5cargo4util4toml13read_manifest (20 samples, 0.51%)</title><rect x="3.9908%" y="565" width="0.5116%" height="15" fill="rgb(216,154,8)"/><text x="4.2408%" y="575.50"></text></g><g><title>_RNvXs0_NtCs9cHTmVbfBFL_4toml5tableINtNtB7_3map3MapNtNtCsd3RHxJkQi5j_5alloc6string6StringNtNtB7_5value5ValueENtNtNtCsi4K1ZUsoJC0_4core3str6traits7FromStr8from_str (19 samples, 0.49%)</title><rect x="4.0164%" y="549" width="0.4861%" height="15" fill="rgb(244,35,45)"/><text x="4.2664%" y="559.50"></text></g><g><title>_RNvXs5_NtCs8cwQ6Hc7UYR_9toml_edit2deNtB5_12DeserializerNtNtNtCsi4K1ZUsoJC0_4core3str6traits7FromStr8from_str (13 samples, 0.33%)</title><rect x="4.1699%" y="533" width="0.3326%" height="15" fill="rgb(251,115,12)"/><text x="4.4199%" y="543.50"></text></g><g><title>_RNvNtCs8cwQ6Hc7UYR_9toml_edit6parser14parse_document (13 samples, 0.33%)</title><rect x="4.1699%" y="517" width="0.3326%" height="15" fill="rgb(240,54,50)"/><text x="4.4199%" y="527.50"></text></g><g><title>_RNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser8document8document (12 samples, 0.31%)</title><rect x="4.1954%" y="501" width="0.3070%" height="15" fill="rgb(233,84,52)"/><text x="4.4454%" y="511.50"></text></g><g><title>_RINvNtNtCseIdT0lGreXn_6winnow10combinator5multi8repeat0_INtNtB6_6stream7LocatedRNtBV_4BStrETuuEuNtNtB6_5error12ContextErrorTNCNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser8document8documents0_0NCNvB22_8parse_ws0EEB26_ (12 samples, 0.31%)</title><rect x="4.1954%" y="485" width="0.3070%" height="15" fill="rgb(207,117,47)"/><text x="4.4454%" y="495.50"></text></g><g><title>_RNvXs0_NtCs9cHTmVbfBFL_4toml5tableINtNtB7_3map3MapNtNtCsd3RHxJkQi5j_5alloc6string6StringNtNtB7_5value5ValueENtNtNtCsi4K1ZUsoJC0_4core3str6traits7FromStr8from_str (9 samples, 0.23%)</title><rect x="4.5024%" y="565" width="0.2302%" height="15" fill="rgb(249,43,39)"/><text x="4.7524%" y="575.50"></text></g><g><title>_RNvXs5_NtCs8cwQ6Hc7UYR_9toml_edit2deNtB5_12DeserializerNtNtNtCsi4K1ZUsoJC0_4core3str6traits7FromStr8from_str (6 samples, 0.15%)</title><rect x="4.5792%" y="549" width="0.1535%" height="15" fill="rgb(209,38,44)"/><text x="4.8292%" y="559.50"></text></g><g><title>_RNvNtCs8cwQ6Hc7UYR_9toml_edit6parser14parse_document (6 samples, 0.15%)</title><rect x="4.5792%" y="533" width="0.1535%" height="15" fill="rgb(236,212,23)"/><text x="4.8292%" y="543.50"></text></g><g><title>_RNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser8document8document (6 samples, 0.15%)</title><rect x="4.5792%" y="517" width="0.1535%" height="15" fill="rgb(242,79,21)"/><text x="4.8292%" y="527.50"></text></g><g><title>_RINvNtNtCseIdT0lGreXn_6winnow10combinator5multi8repeat0_INtNtB6_6stream7LocatedRNtBV_4BStrETuuEuNtNtB6_5error12ContextErrorTNCNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser8document8documents0_0NCNvB22_8parse_ws0EEB26_ (6 samples, 0.15%)</title><rect x="4.5792%" y="501" width="0.1535%" height="15" fill="rgb(211,96,35)"/><text x="4.8292%" y="511.50"></text></g><g><title>_RNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser8document12parse_keyval (5 samples, 0.13%)</title><rect x="4.6048%" y="485" width="0.1279%" height="15" fill="rgb(253,215,40)"/><text x="4.8548%" y="495.50"></text></g><g><title>_RNCNvNtNtCs8cwQ6Hc7UYR_9toml_edit6parser5value5value0B7_ (5 samples, 0.13%)</title><rect x="4.6048%" y="469" width="0.1279%" height="15" fill="rgb(211,81,21)"/><text x="4.8548%" y="479.50"></text></g><g><title>[unknown] (182 samples, 4.66%)</title><rect x="0.2302%" y="581" width="4.6559%" height="15" fill="rgb(208,190,38)"/><text x="0.4802%" y="591.50">[unkn..</text></g><g><title>cargo (193 samples, 4.94%)</title><rect x="0.0000%" y="597" width="4.9373%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="607.50">cargo</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.10%)</title><rect x="5.3211%" y="581" width="0.1023%" height="15" fill="rgb(237,122,38)"/><text x="5.5711%" y="591.50"></text></g><g><title>[libc.so.6] (14 samples, 0.36%)</title><rect x="5.4745%" y="565" width="0.3581%" height="15" fill="rgb(244,218,35)"/><text x="5.7245%" y="575.50"></text></g><g><title>aho_corasick::automaton::try_find_fwd (5 samples, 0.13%)</title><rect x="5.8327%" y="565" width="0.1279%" height="15" fill="rgb(240,68,47)"/><text x="6.0827%" y="575.50"></text></g><g><title>cfree (9 samples, 0.23%)</title><rect x="5.9862%" y="565" width="0.2302%" height="15" fill="rgb(210,16,53)"/><text x="6.2362%" y="575.50"></text></g><g><title>[[heap]] (40 samples, 1.02%)</title><rect x="5.4234%" y="581" width="1.0233%" height="15" fill="rgb(235,124,12)"/><text x="5.6734%" y="591.50"></text></g><g><title>malloc (8 samples, 0.20%)</title><rect x="6.2420%" y="565" width="0.2047%" height="15" fill="rgb(224,169,11)"/><text x="6.4920%" y="575.50"></text></g><g><title>terraphim_pipeline::RoleGraph::add_or_update_document (4 samples, 0.10%)</title><rect x="6.7792%" y="565" width="0.1023%" height="15" fill="rgb(250,166,2)"/><text x="7.0292%" y="575.50"></text></g><g><title>[[stack]] (20 samples, 0.51%)</title><rect x="6.4467%" y="581" width="0.5116%" height="15" fill="rgb(242,216,29)"/><text x="6.6967%" y="591.50"></text></g><g><title>[anon] (4 samples, 0.10%)</title><rect x="6.9583%" y="581" width="0.1023%" height="15" fill="rgb(230,116,27)"/><text x="7.2083%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.15%)</title><rect x="7.0606%" y="581" width="0.1535%" height="15" fill="rgb(228,99,48)"/><text x="7.3106%" y="591.50"></text></g><g><title>[libc.so.6] (8 samples, 0.20%)</title><rect x="7.2141%" y="581" width="0.2047%" height="15" fill="rgb(253,11,6)"/><text x="7.4641%" y="591.50"></text></g><g><title>terraphim_pipeline::RoleGraph::init_or_update_node (7 samples, 0.18%)</title><rect x="7.5467%" y="565" width="0.1791%" height="15" fill="rgb(247,143,39)"/><text x="7.7967%" y="575.50"></text></g><g><title>[pipeline_benchmark-81a9bd3f5a2449fe] (14 samples, 0.36%)</title><rect x="7.4188%" y="581" width="0.3581%" height="15" fill="rgb(236,97,10)"/><text x="7.6688%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.18%)</title><rect x="7.9560%" y="485" width="0.1791%" height="15" fill="rgb(233,208,19)"/><text x="8.2060%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.18%)</title><rect x="7.9560%" y="469" width="0.1791%" height="15" fill="rgb(216,164,2)"/><text x="8.2060%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.18%)</title><rect x="7.9560%" y="453" width="0.1791%" height="15" fill="rgb(220,129,5)"/><text x="8.2060%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.18%)</title><rect x="7.9560%" y="437" width="0.1791%" height="15" fill="rgb(242,17,10)"/><text x="8.2060%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.18%)</title><rect x="7.9560%" y="421" width="0.1791%" height="15" fill="rgb(242,107,0)"/><text x="8.2060%" y="431.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.18%)</title><rect x="7.9560%" y="405" width="0.1791%" height="15" fill="rgb(251,28,31)"/><text x="8.2060%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.38%)</title><rect x="7.7769%" y="565" width="0.3837%" height="15" fill="rgb(233,223,10)"/><text x="8.0269%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.20%)</title><rect x="7.9560%" y="549" width="0.2047%" height="15" fill="rgb(215,21,27)"/><text x="8.2060%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.20%)</title><rect x="7.9560%" y="533" width="0.2047%" height="15" fill="rgb(232,23,21)"/><text x="8.2060%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.20%)</title><rect x="7.9560%" y="517" width="0.2047%" height="15" fill="rgb(244,5,23)"/><text x="8.2060%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.20%)</title><rect x="7.9560%" y="501" width="0.2047%" height="15" fill="rgb(226,81,46)"/><text x="8.2060%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.41%)</title><rect x="8.1607%" y="565" width="0.4093%" height="15" fill="rgb(247,70,30)"/><text x="8.4107%" y="575.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::fill_failure_transitions (7 samples, 0.18%)</title><rect x="8.5955%" y="277" width="0.1791%" height="15" fill="rgb(212,68,19)"/><text x="8.8455%" y="287.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (6 samples, 0.15%)</title><rect x="8.6211%" y="261" width="0.1535%" height="15" fill="rgb(240,187,13)"/><text x="8.8711%" y="271.50"></text></g><g><title>[libc.so.6] (9 samples, 0.23%)</title><rect x="8.5700%" y="565" width="0.2302%" height="15" fill="rgb(223,113,26)"/><text x="8.8200%" y="575.50"></text></g><g><title>main (8 samples, 0.20%)</title><rect x="8.5955%" y="549" width="0.2047%" height="15" fill="rgb(206,192,2)"/><text x="8.8455%" y="559.50"></text></g><g><title>std::rt::lang_start_internal (8 samples, 0.20%)</title><rect x="8.5955%" y="533" width="0.2047%" height="15" fill="rgb(241,108,4)"/><text x="8.8455%" y="543.50"></text></g><g><title>std::panic::catch_unwind (8 samples, 0.20%)</title><rect x="8.5955%" y="517" width="0.2047%" height="15" fill="rgb(247,173,49)"/><text x="8.8455%" y="527.50"></text></g><g><title>std::panicking::try (8 samples, 0.20%)</title><rect x="8.5955%" y="501" width="0.2047%" height="15" fill="rgb(224,114,35)"/><text x="8.8455%" y="511.50"></text></g><g><title>std::panicking::try::do_call (8 samples, 0.20%)</title><rect x="8.5955%" y="485" width="0.2047%" height="15" fill="rgb(245,159,27)"/><text x="8.8455%" y="495.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (8 samples, 0.20%)</title><rect x="8.5955%" y="469" width="0.2047%" height="15" fill="rgb(245,172,44)"/><text x="8.8455%" y="479.50"></text></g><g><title>std::panic::catch_unwind (8 samples, 0.20%)</title><rect x="8.5955%" y="453" width="0.2047%" height="15" fill="rgb(236,23,11)"/><text x="8.8455%" y="463.50"></text></g><g><title>std::panicking::try (8 samples, 0.20%)</title><rect x="8.5955%" y="437" width="0.2047%" height="15" fill="rgb(205,117,38)"/><text x="8.8455%" y="447.50"></text></g><g><title>std::panicking::try::do_call (8 samples, 0.20%)</title><rect x="8.5955%" y="421" width="0.2047%" height="15" fill="rgb(237,72,25)"/><text x="8.8455%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8 samples, 0.20%)</title><rect x="8.5955%" y="405" width="0.2047%" height="15" fill="rgb(244,70,9)"/><text x="8.8455%" y="415.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17heed6b2ce14a0a4c6E.llvm.5661542841912809587 (8 samples, 0.20%)</title><rect x="8.5955%" y="389" width="0.2047%" height="15" fill="rgb(217,125,39)"/><text x="8.8455%" y="399.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8 samples, 0.20%)</title><rect x="8.5955%" y="373" width="0.2047%" height="15" fill="rgb(235,36,10)"/><text x="8.8455%" y="383.50"></text></g><g><title>pipeline_benchmark::main (8 samples, 0.20%)</title><rect x="8.5955%" y="357" width="0.2047%" height="15" fill="rgb(251,123,47)"/><text x="8.8455%" y="367.50"></text></g><g><title>terraphim_pipeline::RoleGraph::parse_document_to_pair (8 samples, 0.20%)</title><rect x="8.5955%" y="341" width="0.2047%" height="15" fill="rgb(221,13,13)"/><text x="8.8455%" y="351.50"></text></g><g><title>terraphim_automata::matcher::find_matches_ids (8 samples, 0.20%)</title><rect x="8.5955%" y="325" width="0.2047%" height="15" fill="rgb(238,131,9)"/><text x="8.8455%" y="335.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (8 samples, 0.20%)</title><rect x="8.5955%" y="309" width="0.2047%" height="15" fill="rgb(211,50,8)"/><text x="8.8455%" y="319.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (8 samples, 0.20%)</title><rect x="8.5955%" y="293" width="0.2047%" height="15" fill="rgb(245,182,24)"/><text x="8.8455%" y="303.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::fill_failure_transitions (40 samples, 1.02%)</title><rect x="8.8258%" y="261" width="1.0233%" height="15" fill="rgb(242,14,37)"/><text x="9.0758%" y="271.50"></text></g><g><title>__libc_start_main (41 samples, 1.05%)</title><rect x="8.8258%" y="565" width="1.0489%" height="15" fill="rgb(246,228,12)"/><text x="9.0758%" y="575.50"></text></g><g><title>[libc.so.6] (41 samples, 1.05%)</title><rect x="8.8258%" y="549" width="1.0489%" height="15" fill="rgb(213,55,15)"/><text x="9.0758%" y="559.50"></text></g><g><title>main (41 samples, 1.05%)</title><rect x="8.8258%" y="533" width="1.0489%" height="15" fill="rgb(209,9,3)"/><text x="9.0758%" y="543.50"></text></g><g><title>std::rt::lang_start_internal (41 samples, 1.05%)</title><rect x="8.8258%" y="517" width="1.0489%" height="15" fill="rgb(230,59,30)"/><text x="9.0758%" y="527.50"></text></g><g><title>std::panic::catch_unwind (41 samples, 1.05%)</title><rect x="8.8258%" y="501" width="1.0489%" height="15" fill="rgb(209,121,21)"/><text x="9.0758%" y="511.50"></text></g><g><title>std::panicking::try (41 samples, 1.05%)</title><rect x="8.8258%" y="485" width="1.0489%" height="15" fill="rgb(220,109,13)"/><text x="9.0758%" y="495.50"></text></g><g><title>std::panicking::try::do_call (41 samples, 1.05%)</title><rect x="8.8258%" y="469" width="1.0489%" height="15" fill="rgb(232,18,1)"/><text x="9.0758%" y="479.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (41 samples, 1.05%)</title><rect x="8.8258%" y="453" width="1.0489%" height="15" fill="rgb(215,41,42)"/><text x="9.0758%" y="463.50"></text></g><g><title>std::panic::catch_unwind (41 samples, 1.05%)</title><rect x="8.8258%" y="437" width="1.0489%" height="15" fill="rgb(224,123,36)"/><text x="9.0758%" y="447.50"></text></g><g><title>std::panicking::try (41 samples, 1.05%)</title><rect x="8.8258%" y="421" width="1.0489%" height="15" fill="rgb(240,125,3)"/><text x="9.0758%" y="431.50"></text></g><g><title>std::panicking::try::do_call (41 samples, 1.05%)</title><rect x="8.8258%" y="405" width="1.0489%" height="15" fill="rgb(205,98,50)"/><text x="9.0758%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (41 samples, 1.05%)</title><rect x="8.8258%" y="389" width="1.0489%" height="15" fill="rgb(205,185,37)"/><text x="9.0758%" y="399.50"></text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17heed6b2ce14a0a4c6E.llvm.5661542841912809587 (41 samples, 1.05%)</title><rect x="8.8258%" y="373" width="1.0489%" height="15" fill="rgb(238,207,15)"/><text x="9.0758%" y="383.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (41 samples, 1.05%)</title><rect x="8.8258%" y="357" width="1.0489%" height="15" fill="rgb(213,199,42)"/><text x="9.0758%" y="367.50"></text></g><g><title>pipeline_benchmark::main (41 samples, 1.05%)</title><rect x="8.8258%" y="341" width="1.0489%" height="15" fill="rgb(235,201,11)"/><text x="9.0758%" y="351.50"></text></g><g><title>terraphim_pipeline::RoleGraph::parse_document_to_pair (41 samples, 1.05%)</title><rect x="8.8258%" y="325" width="1.0489%" height="15" fill="rgb(207,46,11)"/><text x="9.0758%" y="335.50"></text></g><g><title>terraphim_automata::matcher::find_matches_ids (41 samples, 1.05%)</title><rect x="8.8258%" y="309" width="1.0489%" height="15" fill="rgb(241,35,35)"/><text x="9.0758%" y="319.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (41 samples, 1.05%)</title><rect x="8.8258%" y="293" width="1.0489%" height="15" fill="rgb(243,32,47)"/><text x="9.0758%" y="303.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (41 samples, 1.05%)</title><rect x="8.8258%" y="277" width="1.0489%" height="15" fill="rgb(247,202,23)"/><text x="9.0758%" y="287.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::NFA::add_transition (5 samples, 0.13%)</title><rect x="9.9770%" y="565" width="0.1279%" height="15" fill="rgb(219,102,11)"/><text x="10.2270%" y="575.50"></text></g><g><title>cfree (18 samples, 0.46%)</title><rect x="10.1561%" y="565" width="0.4605%" height="15" fill="rgb(243,110,44)"/><text x="10.4061%" y="575.50"></text></g><g><title>[pipeline_benchmark-81a9bd3f5a2449fe] (9 samples, 0.23%)</title><rect x="10.3863%" y="549" width="0.2302%" height="15" fill="rgb(222,74,54)"/><text x="10.6363%" y="559.50"></text></g><g><title>terraphim_pipeline::magic_pair (5 samples, 0.13%)</title><rect x="10.4886%" y="533" width="0.1279%" height="15" fill="rgb(216,99,12)"/><text x="10.7386%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (4 samples, 0.10%)</title><rect x="10.6165%" y="565" width="0.1023%" height="15" fill="rgb(226,22,26)"/><text x="10.8665%" y="575.50"></text></g><g><title>malloc (9 samples, 0.23%)</title><rect x="10.7189%" y="565" width="0.2302%" height="15" fill="rgb(217,163,10)"/><text x="10.9689%" y="575.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::fill_failure_transitions (97 samples, 2.48%)</title><rect x="11.1026%" y="421" width="2.4815%" height="15" fill="rgb(213,25,53)"/><text x="11.3526%" y="431.50">ah..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (20 samples, 0.51%)</title><rect x="13.0724%" y="405" width="0.5116%" height="15" fill="rgb(252,105,26)"/><text x="13.3224%" y="415.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::shuffle (4 samples, 0.10%)</title><rect x="13.5840%" y="421" width="0.1023%" height="15" fill="rgb(220,39,43)"/><text x="13.8340%" y="431.50"></text></g><g><title>terraphim_pipeline::RoleGraph::parse_document_to_pair (114 samples, 2.92%)</title><rect x="10.9491%" y="485" width="2.9163%" height="15" fill="rgb(229,68,48)"/><text x="11.1991%" y="495.50">te..</text></g><g><title>terraphim_automata::matcher::find_matches_ids (114 samples, 2.92%)</title><rect x="10.9491%" y="469" width="2.9163%" height="15" fill="rgb(252,8,32)"/><text x="11.1991%" y="479.50">te..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (114 samples, 2.92%)</title><rect x="10.9491%" y="453" width="2.9163%" height="15" fill="rgb(223,20,43)"/><text x="11.1991%" y="463.50">ah..</text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (114 samples, 2.92%)</title><rect x="10.9491%" y="437" width="2.9163%" height="15" fill="rgb(229,81,49)"/><text x="11.1991%" y="447.50">ah..</text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::fill_failure_transitions (95 samples, 2.43%)</title><rect x="13.9933%" y="421" width="2.4303%" height="15" fill="rgb(236,28,36)"/><text x="14.2433%" y="431.50">ah..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (27 samples, 0.69%)</title><rect x="15.7329%" y="405" width="0.6907%" height="15" fill="rgb(249,185,26)"/><text x="15.9829%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.10%)</title><rect x="16.3213%" y="389" width="0.1023%" height="15" fill="rgb(249,174,33)"/><text x="16.5713%" y="399.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Compiler::shuffle (4 samples, 0.10%)</title><rect x="16.4236%" y="421" width="0.1023%" height="15" fill="rgb(233,201,37)"/><text x="16.6736%" y="431.50"></text></g><g><title>pipeline_benchmark::main (226 samples, 5.78%)</title><rect x="10.9491%" y="565" width="5.7815%" height="15" fill="rgb(221,78,26)"/><text x="11.1991%" y="575.50">pipelin..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (226 samples, 5.78%)</title><rect x="10.9491%" y="549" width="5.7815%" height="15" fill="rgb(250,127,30)"/><text x="11.1991%" y="559.50">criteri..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (226 samples, 5.78%)</title><rect x="10.9491%" y="533" width="5.7815%" height="15" fill="rgb(230,49,44)"/><text x="11.1991%" y="543.50">&lt;alloc:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (226 samples, 5.78%)</title><rect x="10.9491%" y="517" width="5.7815%" height="15" fill="rgb(229,67,23)"/><text x="11.1991%" y="527.50">&lt;core::..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (226 samples, 5.78%)</title><rect x="10.9491%" y="501" width="5.7815%" height="15" fill="rgb(249,83,47)"/><text x="11.1991%" y="511.50">criteri..</text></g><g><title>terraphim_pipeline::RoleGraph::query (112 samples, 2.87%)</title><rect x="13.8654%" y="485" width="2.8652%" height="15" fill="rgb(215,43,3)"/><text x="14.1154%" y="495.50">te..</text></g><g><title>terraphim_automata::matcher::find_matches_ids (112 samples, 2.87%)</title><rect x="13.8654%" y="469" width="2.8652%" height="15" fill="rgb(238,154,13)"/><text x="14.1154%" y="479.50">te..</text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (112 samples, 2.87%)</title><rect x="13.8654%" y="453" width="2.8652%" height="15" fill="rgb(219,56,2)"/><text x="14.1154%" y="463.50">ah..</text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (112 samples, 2.87%)</title><rect x="13.8654%" y="437" width="2.8652%" height="15" fill="rgb(233,0,4)"/><text x="14.1154%" y="447.50">ah..</text></g><g><title>aho_corasick::util::alphabet::ByteClassSet::set_range (4 samples, 0.10%)</title><rect x="16.6283%" y="421" width="0.1023%" height="15" fill="rgb(235,30,7)"/><text x="16.8783%" y="431.50"></text></g><g><title>terraphim_pipeline::RoleGraph::add_or_update_document (10 samples, 0.26%)</title><rect x="16.7818%" y="565" width="0.2558%" height="15" fill="rgb(250,79,13)"/><text x="17.0318%" y="575.50"></text></g><g><title>terraphim_pipeline::RoleGraph::init_or_update_node (7 samples, 0.18%)</title><rect x="17.0376%" y="565" width="0.1791%" height="15" fill="rgb(211,146,34)"/><text x="17.2876%" y="575.50"></text></g><g><title>[unknown] (373 samples, 9.54%)</title><rect x="7.7769%" y="581" width="9.5421%" height="15" fill="rgb(228,22,38)"/><text x="8.0269%" y="591.50">[unknown]</text></g><g><title>terraphim_pipeline::magic_pair (4 samples, 0.10%)</title><rect x="17.2167%" y="565" width="0.1023%" height="15" fill="rgb(235,168,5)"/><text x="17.4667%" y="575.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.13%)</title><rect x="17.3446%" y="277" width="0.1279%" height="15" fill="rgb(221,155,16)"/><text x="17.5946%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (5 samples, 0.13%)</title><rect x="17.3446%" y="261" width="0.1279%" height="15" fill="rgb(215,215,53)"/><text x="17.5946%" y="271.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::ignore_str (5 samples, 0.13%)</title><rect x="17.3446%" y="245" width="0.1279%" height="15" fill="rgb(223,4,10)"/><text x="17.5946%" y="255.50"></text></g><g><title>std::sys::unix::cvt_r (5 samples, 0.13%)</title><rect x="17.4725%" y="213" width="0.1279%" height="15" fill="rgb(234,103,6)"/><text x="17.7225%" y="223.50"></text></g><g><title>std::sys::unix::pipe::read2::_{{closure}} (5 samples, 0.13%)</title><rect x="17.4725%" y="197" width="0.1279%" height="15" fill="rgb(227,97,0)"/><text x="17.7225%" y="207.50"></text></g><g><title>__poll (5 samples, 0.13%)</title><rect x="17.4725%" y="181" width="0.1279%" height="15" fill="rgb(234,150,53)"/><text x="17.7225%" y="191.50"></text></g><g><title>criterion::cargo_target_directory (12 samples, 0.31%)</title><rect x="17.3446%" y="293" width="0.3070%" height="15" fill="rgb(228,201,54)"/><text x="17.5946%" y="303.50"></text></g><g><title>std::process::Command::output (7 samples, 0.18%)</title><rect x="17.4725%" y="277" width="0.1791%" height="15" fill="rgb(222,22,37)"/><text x="17.7225%" y="287.50"></text></g><g><title>std::sys::unix::process::process_inner::&lt;impl std::sys::unix::process::process_common::Command&gt;::output (7 samples, 0.18%)</title><rect x="17.4725%" y="261" width="0.1791%" height="15" fill="rgb(237,53,32)"/><text x="17.7225%" y="271.50"></text></g><g><title>std::sys_common::process::wait_with_output (7 samples, 0.18%)</title><rect x="17.4725%" y="245" width="0.1791%" height="15" fill="rgb(233,25,53)"/><text x="17.7225%" y="255.50"></text></g><g><title>std::sys::unix::pipe::read2 (7 samples, 0.18%)</title><rect x="17.4725%" y="229" width="0.1791%" height="15" fill="rgb(210,40,34)"/><text x="17.7225%" y="239.50"></text></g><g><title>&lt;criterion::Criterion as core::default::Default&gt;::default (14 samples, 0.36%)</title><rect x="17.3190%" y="325" width="0.3581%" height="15" fill="rgb(241,220,44)"/><text x="17.5690%" y="335.50"></text></g><g><title>std::sys_common::once::futex::Once::call (13 samples, 0.33%)</title><rect x="17.3446%" y="309" width="0.3326%" height="15" fill="rgb(235,28,35)"/><text x="17.5946%" y="319.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::repeat (128 samples, 3.27%)</title><rect x="17.6772%" y="325" width="3.2745%" height="15" fill="rgb(210,56,17)"/><text x="17.9272%" y="335.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::repeat (128 samples, 3.27%)</title><rect x="17.6772%" y="309" width="3.2745%" height="15" fill="rgb(224,130,29)"/><text x="17.9272%" y="319.50">all..</text></g><g><title>core::intrinsics::copy_nonoverlapping (128 samples, 3.27%)</title><rect x="17.6772%" y="293" width="3.2745%" height="15" fill="rgb(235,212,8)"/><text x="17.9272%" y="303.50">cor..</text></g><g><title>[libc.so.6] (128 samples, 3.27%)</title><rect x="17.6772%" y="277" width="3.2745%" height="15" fill="rgb(223,33,50)"/><text x="17.9272%" y="287.50">[li..</text></g><g><title>__rdl_alloc (4 samples, 0.10%)</title><rect x="21.7191%" y="69" width="0.1023%" height="15" fill="rgb(219,149,13)"/><text x="21.9691%" y="79.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.10%)</title><rect x="21.7191%" y="53" width="0.1023%" height="15" fill="rgb(250,156,29)"/><text x="21.9691%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (33 samples, 0.84%)</title><rect x="21.5400%" y="165" width="0.8442%" height="15" fill="rgb(216,193,19)"/><text x="21.7900%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (33 samples, 0.84%)</title><rect x="21.5400%" y="149" width="0.8442%" height="15" fill="rgb(216,135,14)"/><text x="21.7900%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (33 samples, 0.84%)</title><rect x="21.5400%" y="133" width="0.8442%" height="15" fill="rgb(241,47,5)"/><text x="21.7900%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.67%)</title><rect x="21.7191%" y="117" width="0.6651%" height="15" fill="rgb(233,42,35)"/><text x="21.9691%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.67%)</title><rect x="21.7191%" y="101" width="0.6651%" height="15" fill="rgb(231,13,6)"/><text x="21.9691%" y="111.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.67%)</title><rect x="21.7191%" y="85" width="0.6651%" height="15" fill="rgb(207,181,40)"/><text x="21.9691%" y="95.50"></text></g><g><title>malloc (17 samples, 0.43%)</title><rect x="21.9493%" y="69" width="0.4349%" height="15" fill="rgb(254,173,49)"/><text x="22.1993%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (47 samples, 1.20%)</title><rect x="21.4121%" y="245" width="1.2024%" height="15" fill="rgb(221,1,38)"/><text x="21.6621%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (42 samples, 1.07%)</title><rect x="21.5400%" y="229" width="1.0744%" height="15" fill="rgb(206,124,46)"/><text x="21.7900%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (42 samples, 1.07%)</title><rect x="21.5400%" y="213" width="1.0744%" height="15" fill="rgb(249,21,11)"/><text x="21.7900%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (42 samples, 1.07%)</title><rect x="21.5400%" y="197" width="1.0744%" height="15" fill="rgb(222,201,40)"/><text x="21.7900%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (42 samples, 1.07%)</title><rect x="21.5400%" y="181" width="1.0744%" height="15" fill="rgb(235,61,29)"/><text x="21.7900%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.23%)</title><rect x="22.3842%" y="165" width="0.2302%" height="15" fill="rgb(219,207,3)"/><text x="22.6342%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.23%)</title><rect x="22.3842%" y="149" width="0.2302%" height="15" fill="rgb(222,56,46)"/><text x="22.6342%" y="159.50"></text></g><g><title>[libc.so.6] (9 samples, 0.23%)</title><rect x="22.3842%" y="133" width="0.2302%" height="15" fill="rgb(239,76,54)"/><text x="22.6342%" y="143.50"></text></g><g><title>&lt;aho_corasick::ahocorasick::FindIter as core::iter::traits::iterator::Iterator&gt;::next (1,700 samples, 43.49%)</title><rect x="25.4541%" y="229" width="43.4894%" height="15" fill="rgb(231,124,27)"/><text x="25.7041%" y="239.50">&lt;aho_corasick::ahocorasick::FindIter as core::iter::traits::iterator::I..</text></g><g><title>aho_corasick::automaton::Automaton::try_find (1,650 samples, 42.21%)</title><rect x="26.7332%" y="213" width="42.2103%" height="15" fill="rgb(249,195,6)"/><text x="26.9832%" y="223.50">aho_corasick::automaton::Automaton::try_find</text></g><g><title>aho_corasick::automaton::try_find_fwd (1,648 samples, 42.16%)</title><rect x="26.7843%" y="197" width="42.1591%" height="15" fill="rgb(237,174,47)"/><text x="27.0343%" y="207.50">aho_corasick::automaton::try_find_fwd</text></g><g><title>[libc.so.6] (47 samples, 1.20%)</title><rect x="68.9690%" y="229" width="1.2024%" height="15" fill="rgb(206,201,31)"/><text x="69.2190%" y="239.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (6 samples, 0.15%)</title><rect x="70.1714%" y="229" width="0.1535%" height="15" fill="rgb(231,57,52)"/><text x="70.4214%" y="239.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build_auto (6 samples, 0.15%)</title><rect x="70.1714%" y="213" width="0.1535%" height="15" fill="rgb(248,177,22)"/><text x="70.4214%" y="223.50"></text></g><g><title>aho_corasick::nfa::contiguous::Builder::build_from_noncontiguous (6 samples, 0.15%)</title><rect x="70.1714%" y="197" width="0.1535%" height="15" fill="rgb(215,211,37)"/><text x="70.4214%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.10%)</title><rect x="70.3249%" y="229" width="0.1023%" height="15" fill="rgb(241,128,51)"/><text x="70.5749%" y="239.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hbb19dcd0a5f383c7E.llvm.540184169161590681 (4 samples, 0.10%)</title><rect x="70.3249%" y="213" width="0.1023%" height="15" fill="rgb(227,165,31)"/><text x="70.5749%" y="223.50"></text></g><g><title>realloc (4 samples, 0.10%)</title><rect x="70.3249%" y="197" width="0.1023%" height="15" fill="rgb(228,167,24)"/><text x="70.5749%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.10%)</title><rect x="70.3249%" y="181" width="0.1023%" height="15" fill="rgb(228,143,12)"/><text x="70.5749%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.10%)</title><rect x="70.3249%" y="165" width="0.1023%" height="15" fill="rgb(249,149,8)"/><text x="70.5749%" y="175.50"></text></g><g><title>terraphim_automata::matcher::find_matches_ids (1,983 samples, 50.73%)</title><rect x="22.6145%" y="245" width="50.7291%" height="15" fill="rgb(243,35,44)"/><text x="22.8645%" y="255.50">terraphim_automata::matcher::find_matches_ids</text></g><g><title>core::hash::BuildHasher::hash_one (114 samples, 2.92%)</title><rect x="70.4272%" y="229" width="2.9163%" height="15" fill="rgb(246,89,9)"/><text x="70.6772%" y="239.50">co..</text></g><g><title>__rust_alloc (6 samples, 0.15%)</title><rect x="82.1694%" y="37" width="0.1535%" height="15" fill="rgb(233,213,13)"/><text x="82.4194%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (35 samples, 0.90%)</title><rect x="81.9135%" y="133" width="0.8954%" height="15" fill="rgb(233,141,41)"/><text x="82.1635%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (35 samples, 0.90%)</title><rect x="81.9135%" y="117" width="0.8954%" height="15" fill="rgb(239,167,4)"/><text x="82.1635%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (33 samples, 0.84%)</title><rect x="81.9647%" y="101" width="0.8442%" height="15" fill="rgb(209,217,16)"/><text x="82.2147%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.74%)</title><rect x="82.0670%" y="85" width="0.7419%" height="15" fill="rgb(219,88,35)"/><text x="82.3170%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.74%)</title><rect x="82.0670%" y="69" width="0.7419%" height="15" fill="rgb(220,193,23)"/><text x="82.3170%" y="79.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.74%)</title><rect x="82.0670%" y="53" width="0.7419%" height="15" fill="rgb(230,90,52)"/><text x="82.3170%" y="63.50"></text></g><g><title>malloc (19 samples, 0.49%)</title><rect x="82.3228%" y="37" width="0.4861%" height="15" fill="rgb(252,106,19)"/><text x="82.5728%" y="47.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (51 samples, 1.30%)</title><rect x="81.7345%" y="213" width="1.3047%" height="15" fill="rgb(206,74,20)"/><text x="81.9845%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (44 samples, 1.13%)</title><rect x="81.9135%" y="197" width="1.1256%" height="15" fill="rgb(230,138,44)"/><text x="82.1635%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (44 samples, 1.13%)</title><rect x="81.9135%" y="181" width="1.1256%" height="15" fill="rgb(235,182,43)"/><text x="82.1635%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (44 samples, 1.13%)</title><rect x="81.9135%" y="165" width="1.1256%" height="15" fill="rgb(242,16,51)"/><text x="82.1635%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (44 samples, 1.13%)</title><rect x="81.9135%" y="149" width="1.1256%" height="15" fill="rgb(248,9,4)"/><text x="82.1635%" y="159.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.23%)</title><rect x="82.8089%" y="133" width="0.2302%" height="15" fill="rgb(210,31,22)"/><text x="83.0589%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.23%)</title><rect x="82.8089%" y="117" width="0.2302%" height="15" fill="rgb(239,54,39)"/><text x="83.0589%" y="127.50"></text></g><g><title>[libc.so.6] (9 samples, 0.23%)</title><rect x="82.8089%" y="101" width="0.2302%" height="15" fill="rgb(230,99,41)"/><text x="83.0589%" y="111.50"></text></g><g><title>[libc.so.6] (7 samples, 0.18%)</title><rect x="83.0391%" y="213" width="0.1791%" height="15" fill="rgb(253,106,12)"/><text x="83.2891%" y="223.50"></text></g><g><title>__rdl_alloc (6 samples, 0.15%)</title><rect x="83.2182%" y="213" width="0.1535%" height="15" fill="rgb(213,46,41)"/><text x="83.4682%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 0.15%)</title><rect x="83.2182%" y="197" width="0.1535%" height="15" fill="rgb(215,133,35)"/><text x="83.4682%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (211 samples, 5.40%)</title><rect x="78.4855%" y="229" width="5.3978%" height="15" fill="rgb(213,28,5)"/><text x="78.7355%" y="239.50">&lt;hashbr..</text></g><g><title>malloc (17 samples, 0.43%)</title><rect x="83.4485%" y="213" width="0.4349%" height="15" fill="rgb(215,77,49)"/><text x="83.6985%" y="223.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.23%)</title><rect x="83.8833%" y="229" width="0.2302%" height="15" fill="rgb(248,100,22)"/><text x="84.1333%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.23%)</title><rect x="83.8833%" y="213" width="0.2302%" height="15" fill="rgb(208,67,9)"/><text x="84.1333%" y="223.50"></text></g><g><title>__rust_dealloc (8 samples, 0.20%)</title><rect x="84.1136%" y="229" width="0.2047%" height="15" fill="rgb(219,133,21)"/><text x="84.3636%" y="239.50"></text></g><g><title>cfree (117 samples, 2.99%)</title><rect x="84.3182%" y="229" width="2.9931%" height="15" fill="rgb(246,46,29)"/><text x="84.5682%" y="239.50">cfr..</text></g><g><title>[libc.so.6] (92 samples, 2.35%)</title><rect x="84.9578%" y="213" width="2.3535%" height="15" fill="rgb(246,185,52)"/><text x="85.2078%" y="223.50">[..</text></g><g><title>[libc.so.6] (37 samples, 0.95%)</title><rect x="90.5347%" y="213" width="0.9465%" height="15" fill="rgb(252,136,11)"/><text x="90.7847%" y="223.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (206 samples, 5.27%)</title><rect x="87.3113%" y="229" width="5.2699%" height="15" fill="rgb(219,138,53)"/><text x="87.5613%" y="239.50">hashbr..</text></g><g><title>_ZN4core4hash5impls52_$LT$impl$u20$core..hash..Hash$u20$for$u20$$RF$T$GT$4hash17h67acb54d0fae1861E.llvm.839758800032598069 (43 samples, 1.10%)</title><rect x="91.4812%" y="213" width="1.1000%" height="15" fill="rgb(211,51,23)"/><text x="91.7312%" y="223.50"></text></g><g><title>terraphim_pipeline::RoleGraph::init_or_update_node (102 samples, 2.61%)</title><rect x="92.5812%" y="229" width="2.6094%" height="15" fill="rgb(247,221,28)"/><text x="92.8312%" y="239.50">te..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.33%)</title><rect x="94.8580%" y="213" width="0.3326%" height="15" fill="rgb(251,222,45)"/><text x="95.1080%" y="223.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h821e9a01c032afacE.llvm.4759838023143973312 (13 samples, 0.33%)</title><rect x="94.8580%" y="197" width="0.3326%" height="15" fill="rgb(217,162,53)"/><text x="95.1080%" y="207.50"></text></g><g><title>realloc (13 samples, 0.33%)</title><rect x="94.8580%" y="181" width="0.3326%" height="15" fill="rgb(229,93,14)"/><text x="95.1080%" y="191.50"></text></g><g><title>[libc.so.6] (13 samples, 0.33%)</title><rect x="94.8580%" y="165" width="0.3326%" height="15" fill="rgb(209,67,49)"/><text x="95.1080%" y="175.50"></text></g><g><title>[libc.so.6] (13 samples, 0.33%)</title><rect x="94.8580%" y="149" width="0.3326%" height="15" fill="rgb(213,87,29)"/><text x="95.1080%" y="159.50"></text></g><g><title>terraphim_pipeline::RoleGraph::parse_document_to_pair (2,955 samples, 75.59%)</title><rect x="21.0028%" y="261" width="75.5948%" height="15" fill="rgb(205,151,52)"/><text x="21.2528%" y="271.50">terraphim_pipeline::RoleGraph::parse_document_to_pair</text></g><g><title>terraphim_pipeline::RoleGraph::add_or_update_document (909 samples, 23.25%)</title><rect x="73.3436%" y="245" width="23.2540%" height="15" fill="rgb(253,215,39)"/><text x="73.5936%" y="255.50">terraphim_pipeline::RoleGraph::add_or..</text></g><g><title>terraphim_pipeline::magic_pair (55 samples, 1.41%)</title><rect x="95.1906%" y="229" width="1.4070%" height="15" fill="rgb(221,220,41)"/><text x="95.4406%" y="239.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (2,985 samples, 76.36%)</title><rect x="20.9517%" y="325" width="76.3622%" height="15" fill="rgb(218,133,21)"/><text x="21.2017%" y="335.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,985 samples, 76.36%)</title><rect x="20.9517%" y="309" width="76.3622%" height="15" fill="rgb(221,193,43)"/><text x="21.2017%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,984 samples, 76.34%)</title><rect x="20.9772%" y="293" width="76.3367%" height="15" fill="rgb(240,128,52)"/><text x="21.2272%" y="303.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (2,984 samples, 76.34%)</title><rect x="20.9772%" y="277" width="76.3367%" height="15" fill="rgb(253,114,12)"/><text x="21.2272%" y="287.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>terraphim_pipeline::RoleGraph::query (28 samples, 0.72%)</title><rect x="96.5976%" y="261" width="0.7163%" height="15" fill="rgb(215,223,47)"/><text x="96.8476%" y="271.50"></text></g><g><title>terraphim_automata::matcher::find_matches_ids (7 samples, 0.18%)</title><rect x="97.1348%" y="245" width="0.1791%" height="15" fill="rgb(248,225,23)"/><text x="97.3848%" y="255.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (7 samples, 0.18%)</title><rect x="97.1348%" y="229" width="0.1791%" height="15" fill="rgb(250,108,0)"/><text x="97.3848%" y="239.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build_auto (7 samples, 0.18%)</title><rect x="97.1348%" y="213" width="0.1791%" height="15" fill="rgb(228,208,7)"/><text x="97.3848%" y="223.50"></text></g><g><title>aho_corasick::nfa::contiguous::Builder::build_from_noncontiguous (7 samples, 0.18%)</title><rect x="97.1348%" y="197" width="0.1791%" height="15" fill="rgb(244,45,10)"/><text x="97.3848%" y="207.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build_auto (4 samples, 0.10%)</title><rect x="97.3395%" y="277" width="0.1023%" height="15" fill="rgb(207,125,25)"/><text x="97.5895%" y="287.50"></text></g><g><title>aho_corasick::nfa::contiguous::Builder::build_from_noncontiguous (4 samples, 0.10%)</title><rect x="97.3395%" y="261" width="0.1023%" height="15" fill="rgb(210,195,18)"/><text x="97.5895%" y="271.50"></text></g><g><title>_start (3,138 samples, 80.28%)</title><rect x="17.3190%" y="581" width="80.2763%" height="15" fill="rgb(249,80,12)"/><text x="17.5690%" y="591.50">_start</text></g><g><title>__libc_start_main (3,138 samples, 80.28%)</title><rect x="17.3190%" y="565" width="80.2763%" height="15" fill="rgb(221,65,9)"/><text x="17.5690%" y="575.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,138 samples, 80.28%)</title><rect x="17.3190%" y="549" width="80.2763%" height="15" fill="rgb(235,49,36)"/><text x="17.5690%" y="559.50">[libc.so.6]</text></g><g><title>main (3,138 samples, 80.28%)</title><rect x="17.3190%" y="533" width="80.2763%" height="15" fill="rgb(225,32,20)"/><text x="17.5690%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (3,138 samples, 80.28%)</title><rect x="17.3190%" y="517" width="80.2763%" height="15" fill="rgb(215,141,46)"/><text x="17.5690%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,138 samples, 80.28%)</title><rect x="17.3190%" y="501" width="80.2763%" height="15" fill="rgb(250,160,47)"/><text x="17.5690%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,138 samples, 80.28%)</title><rect x="17.3190%" y="485" width="80.2763%" height="15" fill="rgb(216,222,40)"/><text x="17.5690%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,138 samples, 80.28%)</title><rect x="17.3190%" y="469" width="80.2763%" height="15" fill="rgb(234,217,39)"/><text x="17.5690%" y="479.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3,138 samples, 80.28%)</title><rect x="17.3190%" y="453" width="80.2763%" height="15" fill="rgb(207,178,40)"/><text x="17.5690%" y="463.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (3,138 samples, 80.28%)</title><rect x="17.3190%" y="437" width="80.2763%" height="15" fill="rgb(221,136,13)"/><text x="17.5690%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,138 samples, 80.28%)</title><rect x="17.3190%" y="421" width="80.2763%" height="15" fill="rgb(249,199,10)"/><text x="17.5690%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,138 samples, 80.28%)</title><rect x="17.3190%" y="405" width="80.2763%" height="15" fill="rgb(249,222,13)"/><text x="17.5690%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,138 samples, 80.28%)</title><rect x="17.3190%" y="389" width="80.2763%" height="15" fill="rgb(244,185,38)"/><text x="17.5690%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17heed6b2ce14a0a4c6E.llvm.5661542841912809587 (3,138 samples, 80.28%)</title><rect x="17.3190%" y="373" width="80.2763%" height="15" fill="rgb(236,202,9)"/><text x="17.5690%" y="383.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17heed6b2ce14a0a4c6E.llvm.5661542841912809587</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,138 samples, 80.28%)</title><rect x="17.3190%" y="357" width="80.2763%" height="15" fill="rgb(250,229,37)"/><text x="17.5690%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>pipeline_benchmark::main (3,138 samples, 80.28%)</title><rect x="17.3190%" y="341" width="80.2763%" height="15" fill="rgb(206,174,23)"/><text x="17.5690%" y="351.50">pipeline_benchmark::main</text></g><g><title>terraphim_pipeline::RoleGraph::parse_document_to_pair (10 samples, 0.26%)</title><rect x="97.3395%" y="325" width="0.2558%" height="15" fill="rgb(211,33,43)"/><text x="97.5895%" y="335.50"></text></g><g><title>terraphim_automata::matcher::find_matches_ids (10 samples, 0.26%)</title><rect x="97.3395%" y="309" width="0.2558%" height="15" fill="rgb(245,58,50)"/><text x="97.5895%" y="319.50"></text></g><g><title>aho_corasick::ahocorasick::AhoCorasickBuilder::build (10 samples, 0.26%)</title><rect x="97.3395%" y="293" width="0.2558%" height="15" fill="rgb(244,68,36)"/><text x="97.5895%" y="303.50"></text></g><g><title>aho_corasick::nfa::noncontiguous::Builder::build (6 samples, 0.15%)</title><rect x="97.4418%" y="277" width="0.1535%" height="15" fill="rgb(232,229,15)"/><text x="97.6918%" y="287.50"></text></g><g><title>pipeline_benchm (3,632 samples, 92.91%)</title><rect x="4.9373%" y="597" width="92.9138%" height="15" fill="rgb(254,30,23)"/><text x="5.1873%" y="607.50">pipeline_benchm</text></g><g><title>[libc.so.6] (8 samples, 0.20%)</title><rect x="98.0046%" y="581" width="0.2047%" height="15" fill="rgb(235,160,14)"/><text x="98.2546%" y="591.50"></text></g><g><title>[libc.so.6] (6 samples, 0.15%)</title><rect x="98.0558%" y="565" width="0.1535%" height="15" fill="rgb(212,155,44)"/><text x="98.3058%" y="575.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (6 samples, 0.15%)</title><rect x="98.0558%" y="549" width="0.1535%" height="15" fill="rgb(226,2,50)"/><text x="98.3058%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6 samples, 0.15%)</title><rect x="98.0558%" y="533" width="0.1535%" height="15" fill="rgb(234,177,6)"/><text x="98.3058%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6 samples, 0.15%)</title><rect x="98.0558%" y="517" width="0.1535%" height="15" fill="rgb(217,24,9)"/><text x="98.3058%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6 samples, 0.15%)</title><rect x="98.0558%" y="501" width="0.1535%" height="15" fill="rgb(220,13,46)"/><text x="98.3058%" y="511.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.15%)</title><rect x="98.0558%" y="485" width="0.1535%" height="15" fill="rgb(239,221,27)"/><text x="98.3058%" y="495.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (6 samples, 0.15%)</title><rect x="98.0558%" y="469" width="0.1535%" height="15" fill="rgb(222,198,25)"/><text x="98.3058%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (6 samples, 0.15%)</title><rect x="98.0558%" y="453" width="0.1535%" height="15" fill="rgb(211,99,13)"/><text x="98.3058%" y="463.50"></text></g><g><title>tokio::runtime::context::set_scheduler (6 samples, 0.15%)</title><rect x="98.0558%" y="437" width="0.1535%" height="15" fill="rgb(232,111,31)"/><text x="98.3058%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (5 samples, 0.13%)</title><rect x="98.0814%" y="421" width="0.1279%" height="15" fill="rgb(245,82,37)"/><text x="98.3314%" y="431.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17h71761391b84e0d3fE.llvm.16036326880050194642 (5 samples, 0.13%)</title><rect x="98.0814%" y="405" width="0.1279%" height="15" fill="rgb(227,149,46)"/><text x="98.3314%" y="415.50"></text></g><g><title>_ZN5tokio7runtime2io6driver6Driver4turn17h6541e60fae85d9baE.llvm.11908891908694741539 (5 samples, 0.13%)</title><rect x="98.0814%" y="389" width="0.1279%" height="15" fill="rgb(218,36,50)"/><text x="98.3314%" y="399.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (5 samples, 0.13%)</title><rect x="98.0814%" y="373" width="0.1279%" height="15" fill="rgb(226,80,48)"/><text x="98.3314%" y="383.50"></text></g><g><title>epoll_wait (4 samples, 0.10%)</title><rect x="98.1069%" y="357" width="0.1023%" height="15" fill="rgb(238,224,15)"/><text x="98.3569%" y="367.50"></text></g><g><title>EVP_KEYMGMT_do_all_provided (7 samples, 0.18%)</title><rect x="98.5418%" y="197" width="0.1791%" height="15" fill="rgb(241,136,10)"/><text x="98.7918%" y="207.50"></text></g><g><title>[libcrypto.so.3] (7 samples, 0.18%)</title><rect x="98.5418%" y="181" width="0.1791%" height="15" fill="rgb(208,32,45)"/><text x="98.7918%" y="191.50"></text></g><g><title>[libcrypto.so.3] (7 samples, 0.18%)</title><rect x="98.5418%" y="165" width="0.1791%" height="15" fill="rgb(207,135,9)"/><text x="98.7918%" y="175.50"></text></g><g><title>OSSL_DECODER_do_all_provided (4 samples, 0.10%)</title><rect x="98.7209%" y="181" width="0.1023%" height="15" fill="rgb(206,86,44)"/><text x="98.9709%" y="191.50"></text></g><g><title>[libcrypto.so.3] (4 samples, 0.10%)</title><rect x="98.7209%" y="165" width="0.1023%" height="15" fill="rgb(245,177,15)"/><text x="98.9709%" y="175.50"></text></g><g><title>OSSL_DECODER_is_a (10 samples, 0.26%)</title><rect x="98.8232%" y="181" width="0.2558%" height="15" fill="rgb(206,64,50)"/><text x="99.0732%" y="191.50"></text></g><g><title>[libcrypto.so.3] (10 samples, 0.26%)</title><rect x="98.8232%" y="165" width="0.2558%" height="15" fill="rgb(234,36,40)"/><text x="99.0732%" y="175.50"></text></g><g><title>[libcrypto.so.3] (9 samples, 0.23%)</title><rect x="98.8488%" y="149" width="0.2302%" height="15" fill="rgb(213,64,8)"/><text x="99.0988%" y="159.50"></text></g><g><title>OPENSSL_LH_retrieve (4 samples, 0.10%)</title><rect x="98.9767%" y="133" width="0.1023%" height="15" fill="rgb(210,75,36)"/><text x="99.2267%" y="143.50"></text></g><g><title>[libcrypto.so.3] (4 samples, 0.10%)</title><rect x="98.9767%" y="117" width="0.1023%" height="15" fill="rgb(229,88,21)"/><text x="99.2267%" y="127.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (15 samples, 0.38%)</title><rect x="98.7209%" y="197" width="0.3837%" height="15" fill="rgb(252,204,47)"/><text x="98.9709%" y="207.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (25 samples, 0.64%)</title><rect x="98.5418%" y="213" width="0.6395%" height="15" fill="rgb(208,77,27)"/><text x="98.7918%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (28 samples, 0.72%)</title><rect x="98.5418%" y="501" width="0.7163%" height="15" fill="rgb(221,76,26)"/><text x="98.7918%" y="511.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (28 samples, 0.72%)</title><rect x="98.5418%" y="485" width="0.7163%" height="15" fill="rgb(225,139,18)"/><text x="98.7918%" y="495.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (28 samples, 0.72%)</title><rect x="98.5418%" y="469" width="0.7163%" height="15" fill="rgb(230,137,11)"/><text x="98.7918%" y="479.50"></text></g><g><title>reqwest::connect::Connector::new_default_tls (28 samples, 0.72%)</title><rect x="98.5418%" y="453" width="0.7163%" height="15" fill="rgb(212,28,1)"/><text x="98.7918%" y="463.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (28 samples, 0.72%)</title><rect x="98.5418%" y="437" width="0.7163%" height="15" fill="rgb(248,164,17)"/><text x="98.7918%" y="447.50"></text></g><g><title>native_tls::imp::TlsConnector::new (28 samples, 0.72%)</title><rect x="98.5418%" y="421" width="0.7163%" height="15" fill="rgb(222,171,42)"/><text x="98.7918%" y="431.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (28 samples, 0.72%)</title><rect x="98.5418%" y="405" width="0.7163%" height="15" fill="rgb(243,84,45)"/><text x="98.7918%" y="415.50"></text></g><g><title>X509_STORE_set_default_paths_ex (28 samples, 0.72%)</title><rect x="98.5418%" y="389" width="0.7163%" height="15" fill="rgb(252,49,23)"/><text x="98.7918%" y="399.50"></text></g><g><title>[libcrypto.so.3] (28 samples, 0.72%)</title><rect x="98.5418%" y="373" width="0.7163%" height="15" fill="rgb(215,19,7)"/><text x="98.7918%" y="383.50"></text></g><g><title>X509_load_cert_crl_file_ex (28 samples, 0.72%)</title><rect x="98.5418%" y="357" width="0.7163%" height="15" fill="rgb(238,81,41)"/><text x="98.7918%" y="367.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (28 samples, 0.72%)</title><rect x="98.5418%" y="341" width="0.7163%" height="15" fill="rgb(210,199,37)"/><text x="98.7918%" y="351.50"></text></g><g><title>ASN1_item_d2i_ex (28 samples, 0.72%)</title><rect x="98.5418%" y="325" width="0.7163%" height="15" fill="rgb(244,192,49)"/><text x="98.7918%" y="335.50"></text></g><g><title>[libcrypto.so.3] (28 samples, 0.72%)</title><rect x="98.5418%" y="309" width="0.7163%" height="15" fill="rgb(226,211,11)"/><text x="98.7918%" y="319.50"></text></g><g><title>[libcrypto.so.3] (28 samples, 0.72%)</title><rect x="98.5418%" y="293" width="0.7163%" height="15" fill="rgb(236,162,54)"/><text x="98.7918%" y="303.50"></text></g><g><title>[libcrypto.so.3] (28 samples, 0.72%)</title><rect x="98.5418%" y="277" width="0.7163%" height="15" fill="rgb(220,229,9)"/><text x="98.7918%" y="287.50"></text></g><g><title>[libcrypto.so.3] (28 samples, 0.72%)</title><rect x="98.5418%" y="261" width="0.7163%" height="15" fill="rgb(250,87,22)"/><text x="98.7918%" y="271.50"></text></g><g><title>[libcrypto.so.3] (28 samples, 0.72%)</title><rect x="98.5418%" y="245" width="0.7163%" height="15" fill="rgb(239,43,17)"/><text x="98.7918%" y="255.50"></text></g><g><title>[libcrypto.so.3] (28 samples, 0.72%)</title><rect x="98.5418%" y="229" width="0.7163%" height="15" fill="rgb(231,177,25)"/><text x="98.7918%" y="239.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (29 samples, 0.74%)</title><rect x="98.5418%" y="565" width="0.7419%" height="15" fill="rgb(219,179,1)"/><text x="98.7918%" y="575.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (29 samples, 0.74%)</title><rect x="98.5418%" y="549" width="0.7419%" height="15" fill="rgb(238,219,53)"/><text x="98.7918%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (29 samples, 0.74%)</title><rect x="98.5418%" y="533" width="0.7419%" height="15" fill="rgb(232,167,36)"/><text x="98.7918%" y="543.50"></text></g><g><title>tokio::runtime::context::set_scheduler (29 samples, 0.74%)</title><rect x="98.5418%" y="517" width="0.7419%" height="15" fill="rgb(244,19,51)"/><text x="98.7918%" y="527.50"></text></g><g><title>EVP_KEYMGMT_do_all_provided (8 samples, 0.20%)</title><rect x="99.3605%" y="213" width="0.2047%" height="15" fill="rgb(224,6,22)"/><text x="99.6105%" y="223.50"></text></g><g><title>[libcrypto.so.3] (8 samples, 0.20%)</title><rect x="99.3605%" y="197" width="0.2047%" height="15" fill="rgb(224,145,5)"/><text x="99.6105%" y="207.50"></text></g><g><title>[libcrypto.so.3] (8 samples, 0.20%)</title><rect x="99.3605%" y="181" width="0.2047%" height="15" fill="rgb(234,130,49)"/><text x="99.6105%" y="191.50"></text></g><g><title>[libcrypto.so.3] (8 samples, 0.20%)</title><rect x="99.3605%" y="165" width="0.2047%" height="15" fill="rgb(254,6,2)"/><text x="99.6105%" y="175.50"></text></g><g><title>[libcrypto.so.3] (8 samples, 0.20%)</title><rect x="99.3605%" y="149" width="0.2047%" height="15" fill="rgb(208,96,46)"/><text x="99.6105%" y="159.50"></text></g><g><title>[libcrypto.so.3] (8 samples, 0.20%)</title><rect x="99.3605%" y="133" width="0.2047%" height="15" fill="rgb(239,3,39)"/><text x="99.6105%" y="143.50"></text></g><g><title>[libcrypto.so.3] (7 samples, 0.18%)</title><rect x="99.3860%" y="117" width="0.1791%" height="15" fill="rgb(233,210,1)"/><text x="99.6360%" y="127.50"></text></g><g><title>[libcrypto.so.3] (7 samples, 0.18%)</title><rect x="99.3860%" y="101" width="0.1791%" height="15" fill="rgb(244,137,37)"/><text x="99.6360%" y="111.50"></text></g><g><title>[libcrypto.so.3] (7 samples, 0.18%)</title><rect x="99.3860%" y="85" width="0.1791%" height="15" fill="rgb(240,136,2)"/><text x="99.6360%" y="95.50"></text></g><g><title>[libcrypto.so.3] (4 samples, 0.10%)</title><rect x="99.4628%" y="69" width="0.1023%" height="15" fill="rgb(239,18,37)"/><text x="99.7128%" y="79.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::enter (20 samples, 0.51%)</title><rect x="99.3605%" y="517" width="0.5116%" height="15" fill="rgb(218,185,22)"/><text x="99.6105%" y="527.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (20 samples, 0.51%)</title><rect x="99.3605%" y="501" width="0.5116%" height="15" fill="rgb(225,218,4)"/><text x="99.6105%" y="511.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (20 samples, 0.51%)</title><rect x="99.3605%" y="485" width="0.5116%" height="15" fill="rgb(230,182,32)"/><text x="99.6105%" y="495.50"></text></g><g><title>reqwest::connect::Connector::new_default_tls (20 samples, 0.51%)</title><rect x="99.3605%" y="469" width="0.5116%" height="15" fill="rgb(242,56,43)"/><text x="99.6105%" y="479.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (20 samples, 0.51%)</title><rect x="99.3605%" y="453" width="0.5116%" height="15" fill="rgb(233,99,24)"/><text x="99.6105%" y="463.50"></text></g><g><title>native_tls::imp::TlsConnector::new (20 samples, 0.51%)</title><rect x="99.3605%" y="437" width="0.5116%" height="15" fill="rgb(234,209,42)"/><text x="99.6105%" y="447.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (20 samples, 0.51%)</title><rect x="99.3605%" y="421" width="0.5116%" height="15" fill="rgb(227,7,12)"/><text x="99.6105%" y="431.50"></text></g><g><title>X509_STORE_set_default_paths_ex (20 samples, 0.51%)</title><rect x="99.3605%" y="405" width="0.5116%" height="15" fill="rgb(245,203,43)"/><text x="99.6105%" y="415.50"></text></g><g><title>[libcrypto.so.3] (20 samples, 0.51%)</title><rect x="99.3605%" y="389" width="0.5116%" height="15" fill="rgb(238,205,33)"/><text x="99.6105%" y="399.50"></text></g><g><title>X509_load_cert_crl_file_ex (20 samples, 0.51%)</title><rect x="99.3605%" y="373" width="0.5116%" height="15" fill="rgb(231,56,7)"/><text x="99.6105%" y="383.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (20 samples, 0.51%)</title><rect x="99.3605%" y="357" width="0.5116%" height="15" fill="rgb(244,186,29)"/><text x="99.6105%" y="367.50"></text></g><g><title>ASN1_item_d2i_ex (20 samples, 0.51%)</title><rect x="99.3605%" y="341" width="0.5116%" height="15" fill="rgb(234,111,31)"/><text x="99.6105%" y="351.50"></text></g><g><title>[libcrypto.so.3] (20 samples, 0.51%)</title><rect x="99.3605%" y="325" width="0.5116%" height="15" fill="rgb(241,149,10)"/><text x="99.6105%" y="335.50"></text></g><g><title>[libcrypto.so.3] (20 samples, 0.51%)</title><rect x="99.3605%" y="309" width="0.5116%" height="15" fill="rgb(249,206,44)"/><text x="99.6105%" y="319.50"></text></g><g><title>[libcrypto.so.3] (20 samples, 0.51%)</title><rect x="99.3605%" y="293" width="0.5116%" height="15" fill="rgb(251,153,30)"/><text x="99.6105%" y="303.50"></text></g><g><title>[libcrypto.so.3] (20 samples, 0.51%)</title><rect x="99.3605%" y="277" width="0.5116%" height="15" fill="rgb(239,152,38)"/><text x="99.6105%" y="287.50"></text></g><g><title>[libcrypto.so.3] (20 samples, 0.51%)</title><rect x="99.3605%" y="261" width="0.5116%" height="15" fill="rgb(249,139,47)"/><text x="99.6105%" y="271.50"></text></g><g><title>[libcrypto.so.3] (20 samples, 0.51%)</title><rect x="99.3605%" y="245" width="0.5116%" height="15" fill="rgb(244,64,35)"/><text x="99.6105%" y="255.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (20 samples, 0.51%)</title><rect x="99.3605%" y="229" width="0.5116%" height="15" fill="rgb(216,46,15)"/><text x="99.6105%" y="239.50"></text></g><g><title>OSSL_DECODER_do_all_provided (11 samples, 0.28%)</title><rect x="99.5907%" y="213" width="0.2814%" height="15" fill="rgb(250,74,19)"/><text x="99.8407%" y="223.50"></text></g><g><title>[libcrypto.so.3] (11 samples, 0.28%)</title><rect x="99.5907%" y="197" width="0.2814%" height="15" fill="rgb(249,42,33)"/><text x="99.8407%" y="207.50"></text></g><g><title>[libcrypto.so.3] (11 samples, 0.28%)</title><rect x="99.5907%" y="181" width="0.2814%" height="15" fill="rgb(242,149,17)"/><text x="99.8407%" y="191.50"></text></g><g><title>[libcrypto.so.3] (11 samples, 0.28%)</title><rect x="99.5907%" y="165" width="0.2814%" height="15" fill="rgb(244,29,21)"/><text x="99.8407%" y="175.50"></text></g><g><title>[libcrypto.so.3] (10 samples, 0.26%)</title><rect x="99.6163%" y="149" width="0.2558%" height="15" fill="rgb(220,130,37)"/><text x="99.8663%" y="159.50"></text></g><g><title>[libcrypto.so.3] (9 samples, 0.23%)</title><rect x="99.6419%" y="133" width="0.2302%" height="15" fill="rgb(211,67,2)"/><text x="99.8919%" y="143.50"></text></g><g><title>[libcrypto.so.3] (9 samples, 0.23%)</title><rect x="99.6419%" y="117" width="0.2302%" height="15" fill="rgb(235,68,52)"/><text x="99.8919%" y="127.50"></text></g><g><title>[libcrypto.so.3] (8 samples, 0.20%)</title><rect x="99.6674%" y="101" width="0.2047%" height="15" fill="rgb(246,142,3)"/><text x="99.9174%" y="111.50"></text></g><g><title>[libcrypto.so.3] (5 samples, 0.13%)</title><rect x="99.7442%" y="85" width="0.1279%" height="15" fill="rgb(241,25,7)"/><text x="99.9942%" y="95.50"></text></g><g><title>tokio::runtime::runtime::Runtime::block_on (21 samples, 0.54%)</title><rect x="99.3605%" y="565" width="0.5372%" height="15" fill="rgb(242,119,39)"/><text x="99.6105%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::CurrentThread::block_on (21 samples, 0.54%)</title><rect x="99.3605%" y="549" width="0.5372%" height="15" fill="rgb(241,98,45)"/><text x="99.6105%" y="559.50"></text></g><g><title>tokio::runtime::context::set_scheduler (21 samples, 0.54%)</title><rect x="99.3605%" y="533" width="0.5372%" height="15" fill="rgb(254,28,30)"/><text x="99.6105%" y="543.50"></text></g><g><title>reqwest-interna (83 samples, 2.12%)</title><rect x="97.8511%" y="597" width="2.1233%" height="15" fill="rgb(241,142,54)"/><text x="98.1011%" y="607.50">r..</text></g><g><title>[unknown] (68 samples, 1.74%)</title><rect x="98.2348%" y="581" width="1.7396%" height="15" fill="rgb(222,85,15)"/><text x="98.4848%" y="591.50"></text></g><g><title>all (3,909 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(210,85,47)"/><text x="0.2500%" y="623.50"></text></g></svg></svg>