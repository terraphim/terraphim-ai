use std::fs;
use std::path::Path;

use tsify::Tsify;
use crate::cmd::{ConfigResponse, DocumentResponse, InitialSettings, SearchResponse, Status, GraphNodeDto, GraphEdgeDto, RoleGraphResponse};
use terraphim_config::{Config, ConfigId, Haystack, KnowledgeGraph, KnowledgeGraphLocal, Role, ServiceType};
use terraphim_types::{Document, KnowledgeGraphInputType, NormalizedTermValue, RelevanceFunction, RoleName, SearchQuery};
use terraphim_automata::AutomataPath;

/// Generate TypeScript bindings for all Rust types that are used in the Tauri commands
pub fn generate_typescript_bindings() -> Result<(), Box<dyn std::error::Error>> {
    let bindings_dir = Path::new("../src/lib/generated");
    
    // Create the directory if it doesn't exist
    if !bindings_dir.exists() {
        fs::create_dir_all(bindings_dir)?;
    }

    // Generate bindings for each type
    let mut all_bindings = String::new();
    
    // Header comment
    all_bindings.push_str("// This file is auto-generated by tsify. Do not edit manually.\n");
    all_bindings.push_str("// Run `cargo run --bin generate-bindings` to regenerate.\n\n");
    
    // Core types from terraphim_types
    all_bindings.push_str("// === Core Types ===\n");
    all_bindings.push_str(&RoleName::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&NormalizedTermValue::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&Document::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&SearchQuery::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&RelevanceFunction::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&KnowledgeGraphInputType::DECL);
    all_bindings.push('\n');
    
    // Automata types from terraphim_automata
    all_bindings.push_str("// === Automata Types ===\n");
    all_bindings.push_str(&AutomataPath::DECL);
    all_bindings.push('\n');
    
    // Config types from terraphim_config
    all_bindings.push_str("// === Configuration Types ===\n");
    all_bindings.push_str(&ServiceType::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&Haystack::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&KnowledgeGraphLocal::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&KnowledgeGraph::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&Role::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&ConfigId::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&Config::DECL);
    all_bindings.push('\n');
    
    // Command response types
    all_bindings.push_str("// === Command Response Types ===\n");
    all_bindings.push_str(&Status::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&ConfigResponse::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&SearchResponse::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&DocumentResponse::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&InitialSettings::DECL);
    all_bindings.push('\n');
    
    // Role graph visualization types
    all_bindings.push_str("// === Role Graph Visualization Types ===\n");
    all_bindings.push_str(&GraphNodeDto::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&GraphEdgeDto::DECL);
    all_bindings.push('\n');
    all_bindings.push_str(&RoleGraphResponse::DECL);
    all_bindings.push('\n');

    // Write to the bindings file
    let bindings_path = bindings_dir.join("types.ts");
    fs::write(bindings_path, all_bindings)?;
    
    println!("âœ… TypeScript bindings generated successfully!");
    
    Ok(())
} 