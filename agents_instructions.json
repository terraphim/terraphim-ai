{
  "terraphim_agent_instructions": {
    "version": "1.0.0",
    "system": "Terraphim AI Assistant",
    "description": "Machine-readable instructions for AI agents to leverage Terraphim functionality",
    
    "architecture": {
      "core_components": {
        "rust_backend": {
          "workspace_structure": "Multi-crate workspace with specialized components",
          "main_crates": [
            {
              "name": "terraphim_service",
              "purpose": "Main service layer with search, document management, and AI integration",
              "features": ["openrouter", "ollama", "tracing"],
              "dependencies": ["terraphim_persistence", "terraphim_config", "terraphim_middleware", "terraphim_automata", "terraphim_rolegraph"]
            },
            {
              "name": "terraphim_middleware", 
              "purpose": "Haystack indexing, document processing, and search orchestration",
              "features": ["mcp", "mcp-sse", "mcp-rust-sdk", "openrouter"],
              "dependencies": ["terraphim_config", "terraphim_rolegraph", "terraphim_automata", "terraphim_atomic_client"]
            },
            {
              "name": "terraphim_automata",
              "purpose": "Text matching, autocomplete, and thesaurus building",
              "features": ["remote-loading", "tokio-runtime", "typescript"],
              "key_functions": ["autocomplete_terms", "find_matches", "load_thesaurus", "fuzzy_autocomplete_search_jaro_winkler"]
            },
            {
              "name": "terraphim_rolegraph",
              "purpose": "Knowledge graph implementation with node/edge relationships",
              "dependencies": ["terraphim_automata", "terraphim_types"]
            },
            {
              "name": "terraphim_config",
              "purpose": "Configuration management and role-based settings",
              "features": ["typescript", "openrouter"],
              "config_formats": ["JSON", "TOML"]
            },
            {
              "name": "terraphim_persistence",
              "purpose": "Document storage abstraction layer",
              "backends": {
                "default": ["memory", "sqlite", "dashmap"],
                "optional": ["s3", "atomicserver", "redis", "rocksdb", "redb", "ipfs"],
                "server_profile": ["s3", "atomicserver"]
              }
            },
            {
              "name": "terraphim_mcp_server",
              "purpose": "Model Context Protocol server for AI tool integration",
              "transports": ["stdio", "sse/http"],
              "features": ["openrouter"]
            },
            {
              "name": "terraphim_types",
              "purpose": "Shared type definitions",
              "features": ["typescript"]
            }
          ]
        },
        
        "frontend": {
          "technology": "Svelte with TypeScript",
          "build_tool": "Vite", 
          "desktop_integration": "Tauri",
          "css_framework": "Bulma",
          "location": "desktop/"
        },
        
        "server": {
          "main_binary": "terraphim_server",
          "api_endpoints": [
            "GET /health",
            "POST /config", 
            "POST /documents/search",
            "POST /documents/summarize",
            "POST /chat",
            "GET /config",
            "GET /roles"
          ]
        }
      },
      
      "key_concepts": {
        "roles": "User profiles with specific knowledge domains and search preferences",
        "haystacks": "Data sources (local folders, Notion, email, etc.)",
        "knowledge_graph": "Structured relationships between concepts and documents", 
        "thesaurus": "Concept mappings and synonyms for semantic matching",
        "rolegraph": "Per-role knowledge graph for personalized search"
      }
    },
    
    "agent_system": {
      "agent_definition_structure": {
        "file_location": ".agents/",
        "typescript_definition": {
          "interface": "AgentDefinition",
          "required_fields": ["id", "displayName", "model"],
          "optional_fields": ["version", "publisher", "toolNames", "spawnableAgents", "inputSchema", "outputMode", "outputSchema", "spawnerPrompt", "systemPrompt", "instructionsPrompt", "stepPrompt", "handleSteps"],
          "available_models": ["openai/gpt-5", "anthropic/claude-4-sonnet-20250522", "google/gemini-2.5-pro", "x-ai/grok-4-07-09", "qwen/qwen3-coder", "deepseek/deepseek-chat-v3-0324"]
        },
        
        "available_tools": [
          {
            "name": "read_files",
            "purpose": "Read multiple files from disk",
            "params": ["paths"]
          },
          {
            "name": "write_file", 
            "purpose": "Create or edit files",
            "params": ["path", "instructions", "content"]
          },
          {
            "name": "str_replace",
            "purpose": "Replace strings in files",
            "params": ["path", "replacements"]
          },
          {
            "name": "find_files",
            "purpose": "Find files by natural language description",
            "params": ["prompt"]
          },
          {
            "name": "code_search",
            "purpose": "Search patterns in project files using ripgrep",
            "params": ["pattern", "flags", "cwd"]
          },
          {
            "name": "run_terminal_command",
            "purpose": "Execute CLI commands",
            "params": ["command", "process_type", "cwd", "timeout_seconds"]
          },
          {
            "name": "spawn_agents",
            "purpose": "Spawn multiple agents",
            "params": ["agents"]
          },
          {
            "name": "web_search",
            "purpose": "Search web for current information",
            "params": ["query", "depth"]
          },
          {
            "name": "read_docs",
            "purpose": "Fetch library documentation",
            "params": ["libraryTitle", "topic", "max_tokens"]
          },
          {
            "name": "think_deeply",
            "purpose": "Deep analysis of complex tasks",
            "params": ["thought"]
          }
        ],
        
        "agent_examples": [
          {
            "name": "basic-diff-reviewer",
            "purpose": "Review code changes in git diff",
            "tools": ["read_files", "run_terminal_command"],
            "model": "anthropic/claude-4-sonnet-20250522"
          },
          {
            "name": "git-committer", 
            "purpose": "Create meaningful git commits",
            "tools": ["read_files", "run_terminal_command", "add_message", "end_turn"],
            "model": "anthropic/claude-4-sonnet-20250522",
            "has_handleSteps": true
          },
          {
            "name": "advanced-file-explorer",
            "purpose": "Comprehensive codebase exploration",
            "tools": ["spawn_agents", "set_output"],
            "spawnable_agents": ["codebuff/file-picker@0.0.1"],
            "model": "openai/gpt-5",
            "output_mode": "structured_output"
          }
        ]
      },
      
      "workflow_patterns": {
        "code_review_workflow": {
          "trigger": "After code modifications",
          "agents": ["rust-wasm-code-reviewer"],
          "steps": ["Analyze changes", "Security review", "Performance check", "Best practices validation"]
        },
        
        "git_workflow": {
          "trigger": "Before committing changes",
          "agents": ["git-committer"],
          "steps": ["Run git diff", "Read relevant files", "Create commit message", "Stage and commit"]
        },
        
        "exploration_workflow": {
          "trigger": "Understanding codebase",
          "agents": ["advanced-file-explorer"],
          "steps": ["Spawn file pickers", "Parallel exploration", "Aggregate results"]
        }
      }
    },
    
    "development_workflow": {
      "build_commands": {
        "rust": {
          "build_all": "cargo build --workspace",
          "test_all": "cargo test --workspace", 
          "format": "cargo fmt",
          "lint": "cargo clippy",
          "test_with_features": "cargo test --features openrouter"
        },
        "frontend": {
          "install": "cd desktop && yarn install",
          "dev": "cd desktop && yarn run dev",
          "build": "cd desktop && yarn run build",
          "test": "cd desktop && yarn test",
          "e2e": "cd desktop && yarn run e2e"
        }
      },
      
      "quality_assurance": {
        "pre_commit_hooks": [
          "cargo fmt --all -- --check",
          "cargo clippy --workspace --all-targets --all-features -- -D warnings",
          "conventional commit validation",
          "secret detection",
          "Biome check for frontend"
        ],
        "ci_workflows": [
          "ci-native.yml (GitHub Actions + Docker Buildx)",
          "ci-optimized.yml", 
          "test-matrix.yml",
          "tauri-build.yml"
        ]
      },
      
      "configuration_management": {
        "role_configs": {
          "location": "terraphim_server/default/",
          "examples": ["terraphim_engineer_config.json", "system_operator_config.json"],
          "structure": {
            "name": "string",
            "relevance_function": "BM25|TitleScorer|TerraphimGraph",
            "haystacks": "array",
            "extra": "llm_provider_settings"
          }
        },
        "system_settings": {
          "location": "crates/terraphim_settings/default/",
          "format": "TOML",
          "profiles": ["rocksdb", "sqlite", "dashmap", "memory"]
        }
      }
    },
    
    "search_and_knowledge_system": {
      "relevance_functions": {
        "TitleScorer": "Basic text matching and ranking",
        "BM25/BM25F/BM25Plus": "Advanced text relevance algorithms", 
        "TerraphimGraph": "Semantic graph-based ranking with thesaurus"
      },
      
      "haystack_types": {
        "Ripgrep": "Local filesystem search using ripgrep command",
        "AtomicServer": "Integration with Atomic Data protocol",
        "ClickUp": "Task management with API token authentication",
        "Logseq": "Personal knowledge management with markdown parsing",
        "QueryRs": "Rust documentation and Reddit community search",
        "MCP": "Model Context Protocol for AI tool integration"
      },
      
      "knowledge_graph_workflow": [
        "Thesaurus building from documents or URLs",
        "Automata construction for fast text matching", 
        "Document indexing with concept extraction",
        "Graph construction with nodes/edges/documents",
        "Query processing with semantic expansion"
      ]
    },
    
    "ai_integration": {
      "providers": {
        "OpenRouter": {
          "feature_flag": "openrouter",
          "models": ["anthropic/claude-4-sonnet-20250522", "openai/gpt-5", "google/gemini-2.5-pro"]
        },
        "Ollama": {
          "config_key": "llm_provider",
          "base_url_key": "ollama_base_url", 
          "model_key": "ollama_model"
        }
      },
      
      "mcp_integration": {
        "server_location": "crates/terraphim_mcp_server/",
        "available_tools": [
          "autocomplete_terms",
          "find_matches", 
          "load_thesaurus",
          "is_all_terms_connected_by_path",
          "fuzzy_autocomplete_search_jaro_winkler"
        ],
        "transports": ["stdio", "sse/http"]
      }
    },
    
    "deployment_patterns": {
      "development": {
        "backend": "cargo run",
        "frontend": "cd desktop && yarn run dev",
        "desktop_app": "cd desktop && yarn run tauri dev"
      },
      
      "production": {
        "multi_platform": ["linux/amd64", "linux/arm64", "linux/arm/v7"],
        "containerization": "Docker Buildx with layer optimization",
        "ci_cd": "GitHub Actions with matrix builds"
      }
    },
    
    "best_practices": {
      "rust_code": {
        "async_runtime": "tokio",
        "error_handling": "Result<T, E> with ? operator",
        "naming": "snake_case for variables/functions, PascalCase for types",
        "feature_gates": "#[cfg(feature = \"openrouter\")]",
        "trait_objects": "Use dyn keyword (Arc<dyn StateManager>)"
      },
      
      "frontend_code": {
        "framework": "Svelte with TypeScript",
        "styling": "Bulma CSS (no Tailwind)",
        "package_manager": "yarn",
        "naming": "PascalCase for components, kebab-case for files"
      },
      
      "testing": {
        "unit_tests": "tokio::test for async",
        "integration_tests": "Cross-crate functionality",
        "live_tests": "Environment variable gated",
        "e2e_tests": "Full user workflows"
      }
    },
    
    "common_patterns": {
      "adding_search_providers": [
        "Implement indexer in terraphim_middleware/src/indexer/",
        "Add configuration in terraphim_config", 
        "Integrate with search orchestration in terraphim_service"
      ],
      
      "adding_relevance_functions": [
        "Implement scorer in terraphim_service/src/score/",
        "Update RelevanceFunction enum in terraphim_types",
        "Add handling in main search logic"
      ],
      
      "knowledge_graph_work": [
        "Use terraphim_automata::load_thesaurus() for loading",
        "RoleGraph manages document-to-concept relationships",
        "Thesaurus format: id/nterm/url JSON structure"
      ]
    }
  }
}